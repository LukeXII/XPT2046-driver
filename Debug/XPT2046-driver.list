
XPT2046-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003774  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c5c  08003c5c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c64  08003c64  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08003c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          000000d8  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000178  20000178  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd9a  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc1  00000000  00000000  0002ce6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  0002ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a10  00000000  00000000  0002f928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027dd2  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010106  00000000  00000000  0005810a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0b45  00000000  00000000  00068210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158d55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b28  00000000  00000000  00158da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000a0 	.word	0x200000a0
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003908 	.word	0x08003908

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000a4 	.word	0x200000a4
 80001e8:	08003908 	.word	0x08003908

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <FSM_Init>:
static FSMTableCell_t state_A[] = {{state_C, UART_PREV, actionC}, {state_B, UART_NEXT, actionB}, {state_A, NO_EVENT, no_Action}};
static FSMTableCell_t state_B[] = {{state_A, UART_PREV, actionA}, {state_C, UART_NEXT, actionC}, {state_B, NO_EVENT, no_Action}};
static FSMTableCell_t state_C[] = {{state_B, UART_PREV, actionB}, {state_A, UART_NEXT, actionA}, {state_C, NO_EVENT, no_Action}};

void FSM_Init()
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
	currentState = state_A;
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <FSM_Init+0x14>)
 800051a:	4a04      	ldr	r2, [pc, #16]	; (800052c <FSM_Init+0x18>)
 800051c:	601a      	str	r2, [r3, #0]
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	200000bc 	.word	0x200000bc
 800052c:	20000000 	.word	0x20000000

08000530 <FSM_Update>:

void FSM_Update(FSMEvent_t newEvent)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    for(i = 0;(currentState[i].event != newEvent)&&(currentState[i].event != NO_EVENT);i++)
 800053a:	2300      	movs	r3, #0
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	e002      	b.n	8000546 <FSM_Update+0x16>
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	3301      	adds	r3, #1
 8000544:	73fb      	strb	r3, [r7, #15]
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <FSM_Update+0x78>)
 8000548:	6819      	ldr	r1, [r3, #0]
 800054a:	7bfa      	ldrb	r2, [r7, #15]
 800054c:	4613      	mov	r3, r2
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	4413      	add	r3, r2
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	440b      	add	r3, r1
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	79fa      	ldrb	r2, [r7, #7]
 800055a:	429a      	cmp	r2, r3
 800055c:	d00a      	beq.n	8000574 <FSM_Update+0x44>
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <FSM_Update+0x78>)
 8000560:	6819      	ldr	r1, [r3, #0]
 8000562:	7bfa      	ldrb	r2, [r7, #15]
 8000564:	4613      	mov	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	4413      	add	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	440b      	add	r3, r1
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	2b02      	cmp	r3, #2
 8000572:	d1e5      	bne.n	8000540 <FSM_Update+0x10>
        ;
    currentState[i].action();
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <FSM_Update+0x78>)
 8000576:	6819      	ldr	r1, [r3, #0]
 8000578:	7bfa      	ldrb	r2, [r7, #15]
 800057a:	4613      	mov	r3, r2
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	4413      	add	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	440b      	add	r3, r1
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	4798      	blx	r3
    currentState = currentState[i].nextState;
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <FSM_Update+0x78>)
 800058a:	6819      	ldr	r1, [r3, #0]
 800058c:	7bfa      	ldrb	r2, [r7, #15]
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	440b      	add	r3, r1
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <FSM_Update+0x78>)
 800059c:	6013      	str	r3, [r2, #0]
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000bc 	.word	0x200000bc

080005ac <no_Action>:

void no_Action(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <actionA>:

void actionA(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af02      	add	r7, sp, #8
	LCD_Fill_Screen(RED);
 80005c2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80005c6:	f000 fa3d 	bl	8000a44 <LCD_Fill_Screen>
	LCD_Draw_Text("CESE 2022 =D", 15, 60, BLUE, 4, WHITE);
 80005ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	2304      	movs	r3, #4
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	231f      	movs	r3, #31
 80005d6:	223c      	movs	r2, #60	; 0x3c
 80005d8:	210f      	movs	r1, #15
 80005da:	480a      	ldr	r0, [pc, #40]	; (8000604 <actionA+0x48>)
 80005dc:	f000 fd12 	bl	8001004 <LCD_Draw_Text>
	LCD_Draw_Text("FIUBA", 80, 120, BLACK, 5, RED);
 80005e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2305      	movs	r3, #5
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	2278      	movs	r2, #120	; 0x78
 80005ee:	2150      	movs	r1, #80	; 0x50
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <actionA+0x4c>)
 80005f2:	f000 fd07 	bl	8001004 <LCD_Draw_Text>

	uartSendString((uint8_t *)"ESTADO A\r\n");
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <actionA+0x50>)
 80005f8:	f000 ff6a 	bl	80014d0 <uartSendString>
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	08003920 	.word	0x08003920
 8000608:	08003930 	.word	0x08003930
 800060c:	08003938 	.word	0x08003938

08000610 <actionB>:

void actionB(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af02      	add	r7, sp, #8
	LCD_Fill_Screen(GREEN);
 8000616:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800061a:	f000 fa13 	bl	8000a44 <LCD_Fill_Screen>
	LCD_Draw_Filled_Circle(70, 100, 25, YELLOW);
 800061e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000622:	2219      	movs	r2, #25
 8000624:	2164      	movs	r1, #100	; 0x64
 8000626:	2046      	movs	r0, #70	; 0x46
 8000628:	f000 fb72 	bl	8000d10 <LCD_Draw_Filled_Circle>
	LCD_Draw_Filled_Circle(170, 60, 45, BLACK);
 800062c:	2300      	movs	r3, #0
 800062e:	222d      	movs	r2, #45	; 0x2d
 8000630:	213c      	movs	r1, #60	; 0x3c
 8000632:	20aa      	movs	r0, #170	; 0xaa
 8000634:	f000 fb6c 	bl	8000d10 <LCD_Draw_Filled_Circle>
	LCD_Draw_Filled_Circle(220, 170, 35, ORANGE);
 8000638:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800063c:	2223      	movs	r2, #35	; 0x23
 800063e:	21aa      	movs	r1, #170	; 0xaa
 8000640:	20dc      	movs	r0, #220	; 0xdc
 8000642:	f000 fb65 	bl	8000d10 <LCD_Draw_Filled_Circle>
	LCD_Draw_Filled_Rectangle_Coord(60, 150, 100, 200, BLUE);
 8000646:	231f      	movs	r3, #31
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	23c8      	movs	r3, #200	; 0xc8
 800064c:	2264      	movs	r2, #100	; 0x64
 800064e:	2196      	movs	r1, #150	; 0x96
 8000650:	203c      	movs	r0, #60	; 0x3c
 8000652:	f000 fbe5 	bl	8000e20 <LCD_Draw_Filled_Rectangle_Coord>

	uartSendString((uint8_t *)"ESTADO B\r\n");
 8000656:	4803      	ldr	r0, [pc, #12]	; (8000664 <actionB+0x54>)
 8000658:	f000 ff3a 	bl	80014d0 <uartSendString>
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	08003944 	.word	0x08003944

08000668 <actionC>:

void actionC(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	LCD_Fill_Screen(WHITE);
 800066c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000670:	f000 f9e8 	bl	8000a44 <LCD_Fill_Screen>
	LCD_Draw_Horizontal_Line(10, 50, 200, RED);
 8000674:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000678:	22c8      	movs	r2, #200	; 0xc8
 800067a:	2132      	movs	r1, #50	; 0x32
 800067c:	200a      	movs	r0, #10
 800067e:	f000 fd49 	bl	8001114 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(40, 120, 100, GREEN);
 8000682:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000686:	2264      	movs	r2, #100	; 0x64
 8000688:	2178      	movs	r1, #120	; 0x78
 800068a:	2028      	movs	r0, #40	; 0x28
 800068c:	f000 fd42 	bl	8001114 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Vertical_Line(180, 20, 200, YELLOW);
 8000690:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000694:	22c8      	movs	r2, #200	; 0xc8
 8000696:	2114      	movs	r1, #20
 8000698:	20b4      	movs	r0, #180	; 0xb4
 800069a:	f000 fd7d 	bl	8001198 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(60, 100, 100, BLACK);
 800069e:	2300      	movs	r3, #0
 80006a0:	2264      	movs	r2, #100	; 0x64
 80006a2:	2164      	movs	r1, #100	; 0x64
 80006a4:	203c      	movs	r0, #60	; 0x3c
 80006a6:	f000 fd77 	bl	8001198 <LCD_Draw_Vertical_Line>

	uartSendString((uint8_t *)"ESTADO C\r\n");
 80006aa:	4802      	ldr	r0, [pc, #8]	; (80006b4 <actionC+0x4c>)
 80006ac:	f000 ff10 	bl	80014d0 <uartSendString>

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	08003950 	.word	0x08003950

080006b8 <GPIO_Config>:
 */

#include "API_GPIO.h"

void GPIO_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <GPIO_Config+0x7c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <GPIO_Config+0x7c>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <GPIO_Config+0x7c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
	//__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <GPIO_Config+0x7c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a14      	ldr	r2, [pc, #80]	; (8000734 <GPIO_Config+0x7c>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <GPIO_Config+0x7c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
	//__HAL_RCC_GPIOD_CLK_ENABLE();
	//__HAL_RCC_GPIOE_CLK_ENABLE();

    /* Configure LCD GPIO pins */
    GPIO_InitStruct.Pin = LCD_PIN_RST | LCD_PIN_DC | LCD_PIN_CS | LCD_PIN_LED;
 80006f6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80006fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	480a      	ldr	r0, [pc, #40]	; (8000738 <GPIO_Config+0x80>)
 8000710:	f001 f966 	bl	80019e0 <HAL_GPIO_Init>
*/
    // EDFA input GPIOs initial state
    //HAL_GPIO_WritePin(GPIOC, LCD_PIN_RST | LCD_PIN_DC | LCD_PIN_CS, GPIO_PIN_RESET);

    // LCD GPIOs initial state
    HAL_GPIO_WritePin(GPIOC, LCD_PIN_LED, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071a:	4807      	ldr	r0, [pc, #28]	; (8000738 <GPIO_Config+0x80>)
 800071c:	f001 fb0c 	bl	8001d38 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, LCD_PIN_RST | LCD_PIN_DC | LCD_PIN_CS, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000726:	4804      	ldr	r0, [pc, #16]	; (8000738 <GPIO_Config+0x80>)
 8000728:	f001 fb06 	bl	8001d38 <HAL_GPIO_WritePin>

}
 800072c:	bf00      	nop
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40020800 	.word	0x40020800

0800073c <LCD_Config>:
#include "API_LCD.h"

static LCDHandle_t deviceLCD;

void LCD_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

    deviceLCD.SPI_Handle.Instance 				= SPI1;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <LCD_Config+0x68>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <LCD_Config+0x6c>)
 8000744:	601a      	str	r2, [r3, #0]
    deviceLCD.SPI_Handle.Init.Mode 				= SPI_MODE_MASTER;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <LCD_Config+0x68>)
 8000748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800074c:	605a      	str	r2, [r3, #4]
    deviceLCD.SPI_Handle.Init.Direction 		= SPI_DIRECTION_2LINES;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <LCD_Config+0x68>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
    deviceLCD.SPI_Handle.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <LCD_Config+0x68>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
    deviceLCD.SPI_Handle.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <LCD_Config+0x68>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
    deviceLCD.SPI_Handle.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <LCD_Config+0x68>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
    deviceLCD.SPI_Handle.Init.NSS 				= SPI_NSS_SOFT;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <LCD_Config+0x68>)
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	619a      	str	r2, [r3, #24]
    deviceLCD.SPI_Handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <LCD_Config+0x68>)
 8000770:	2208      	movs	r2, #8
 8000772:	61da      	str	r2, [r3, #28]
    deviceLCD.SPI_Handle.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <LCD_Config+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
    deviceLCD.SPI_Handle.Init.TIMode 			= SPI_TIMODE_DISABLED;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <LCD_Config+0x68>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
    deviceLCD.SPI_Handle.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLED;
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <LCD_Config+0x68>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
    deviceLCD.SPI_Handle.Init.CRCPolynomial 	= 10;
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <LCD_Config+0x68>)
 8000788:	220a      	movs	r2, #10
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&deviceLCD.SPI_Handle) != HAL_OK)
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <LCD_Config+0x68>)
 800078e:	f002 f887 	bl	80028a0 <HAL_SPI_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <LCD_Config+0x62>
    {
    	BSP_LED_On(LED2);
 8000798:	2001      	movs	r0, #1
 800079a:	f000 ff2d 	bl	80015f8 <BSP_LED_On>
    }

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000c0 	.word	0x200000c0
 80007a8:	40013000 	.word	0x40013000

080007ac <LCD_Init>:

void LCD_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LCD_PORT_RST, LCD_PIN_RST, GPIO_PIN_SET);			// Habilita el LCD
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b6:	48a2      	ldr	r0, [pc, #648]	; (8000a40 <LCD_Init+0x294>)
 80007b8:	f001 fabe 	bl	8001d38 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c2:	489f      	ldr	r0, [pc, #636]	; (8000a40 <LCD_Init+0x294>)
 80007c4:	f001 fab8 	bl	8001d38 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT_RST, LCD_PIN_RST, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ce:	489c      	ldr	r0, [pc, #624]	; (8000a40 <LCD_Init+0x294>)
 80007d0:	f001 fab2 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80007d4:	20c8      	movs	r0, #200	; 0xc8
 80007d6:	f000 fff9 	bl	80017cc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e0:	4897      	ldr	r0, [pc, #604]	; (8000a40 <LCD_Init+0x294>)
 80007e2:	f001 faa9 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80007e6:	20c8      	movs	r0, #200	; 0xc8
 80007e8:	f000 fff0 	bl	80017cc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT_RST, LCD_PIN_RST, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f2:	4893      	ldr	r0, [pc, #588]	; (8000a40 <LCD_Init+0x294>)
 80007f4:	f001 faa0 	bl	8001d38 <HAL_GPIO_WritePin>

	//SOFTWARE RESET
	LCD_Write_Command(0x01);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f000 fdad 	bl	8001358 <LCD_Write_Command>
	HAL_Delay(100);
 80007fe:	2064      	movs	r0, #100	; 0x64
 8000800:	f000 ffe4 	bl	80017cc <HAL_Delay>


	LCD_Write_Command(0xEF);
 8000804:	20ef      	movs	r0, #239	; 0xef
 8000806:	f000 fda7 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x03);
 800080a:	2003      	movs	r0, #3
 800080c:	f000 fdc6 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x80);
 8000810:	2080      	movs	r0, #128	; 0x80
 8000812:	f000 fdc3 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x02);
 8000816:	2002      	movs	r0, #2
 8000818:	f000 fdc0 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0xC3);
	LCD_Write_Data(0x08);
	LCD_Write_Data(0x50);
*/
	//POWER CONTROL B
	LCD_Write_Command(0xCF);
 800081c:	20cf      	movs	r0, #207	; 0xcf
 800081e:	f000 fd9b 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x00);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fdba 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0xC1);
 8000828:	20c1      	movs	r0, #193	; 0xc1
 800082a:	f000 fdb7 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x30);
 800082e:	2030      	movs	r0, #48	; 0x30
 8000830:	f000 fdb4 	bl	800139c <LCD_Write_Data>

	//POWER ON SEQUENCE CONTROL
	LCD_Write_Command(0xED);
 8000834:	20ed      	movs	r0, #237	; 0xed
 8000836:	f000 fd8f 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x64);
 800083a:	2064      	movs	r0, #100	; 0x64
 800083c:	f000 fdae 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x03);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 fdab 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x12);
 8000846:	2012      	movs	r0, #18
 8000848:	f000 fda8 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x81);
 800084c:	2081      	movs	r0, #129	; 0x81
 800084e:	f000 fda5 	bl	800139c <LCD_Write_Data>

	//DRIVER TIMING CONTROL A
	LCD_Write_Command(0xE8);
 8000852:	20e8      	movs	r0, #232	; 0xe8
 8000854:	f000 fd80 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x85);
 8000858:	2085      	movs	r0, #133	; 0x85
 800085a:	f000 fd9f 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x00);
 800085e:	2000      	movs	r0, #0
 8000860:	f000 fd9c 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x78);
 8000864:	2078      	movs	r0, #120	; 0x78
 8000866:	f000 fd99 	bl	800139c <LCD_Write_Data>

	//POWER CONTROL A
	LCD_Write_Command(0xCB);
 800086a:	20cb      	movs	r0, #203	; 0xcb
 800086c:	f000 fd74 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x39);
 8000870:	2039      	movs	r0, #57	; 0x39
 8000872:	f000 fd93 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x2C);
 8000876:	202c      	movs	r0, #44	; 0x2c
 8000878:	f000 fd90 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x00);
 800087c:	2000      	movs	r0, #0
 800087e:	f000 fd8d 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x34);
 8000882:	2034      	movs	r0, #52	; 0x34
 8000884:	f000 fd8a 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x02);
 8000888:	2002      	movs	r0, #2
 800088a:	f000 fd87 	bl	800139c <LCD_Write_Data>

	//PUMP RATIO CONTROL
	LCD_Write_Command(0xF7);
 800088e:	20f7      	movs	r0, #247	; 0xf7
 8000890:	f000 fd62 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x20);
 8000894:	2020      	movs	r0, #32
 8000896:	f000 fd81 	bl	800139c <LCD_Write_Data>

	//DRIVER TIMING CONTROL B
	LCD_Write_Command(0xEA);
 800089a:	20ea      	movs	r0, #234	; 0xea
 800089c:	f000 fd5c 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x00);
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 fd7b 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x00);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 fd78 	bl	800139c <LCD_Write_Data>

	//POWER CONTROL,VRH[5:0]
	LCD_Write_Command(0xC0);
 80008ac:	20c0      	movs	r0, #192	; 0xc0
 80008ae:	f000 fd53 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x23);
 80008b2:	2023      	movs	r0, #35	; 0x23
 80008b4:	f000 fd72 	bl	800139c <LCD_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	LCD_Write_Command(0xC1);
 80008b8:	20c1      	movs	r0, #193	; 0xc1
 80008ba:	f000 fd4d 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x10);
 80008be:	2010      	movs	r0, #16
 80008c0:	f000 fd6c 	bl	800139c <LCD_Write_Data>

	//VCM CONTROL
	LCD_Write_Command(0xC5);
 80008c4:	20c5      	movs	r0, #197	; 0xc5
 80008c6:	f000 fd47 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x3E);
 80008ca:	203e      	movs	r0, #62	; 0x3e
 80008cc:	f000 fd66 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x28);
 80008d0:	2028      	movs	r0, #40	; 0x28
 80008d2:	f000 fd63 	bl	800139c <LCD_Write_Data>

	//VCM CONTROL 2
	LCD_Write_Command(0xC7);
 80008d6:	20c7      	movs	r0, #199	; 0xc7
 80008d8:	f000 fd3e 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x86);
 80008dc:	2086      	movs	r0, #134	; 0x86
 80008de:	f000 fd5d 	bl	800139c <LCD_Write_Data>

	//MEMORY ACCESS CONTROL
	LCD_Write_Command(0x0B);
 80008e2:	200b      	movs	r0, #11
 80008e4:	f000 fd38 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x48);
 80008e8:	2048      	movs	r0, #72	; 0x48
 80008ea:	f000 fd57 	bl	800139c <LCD_Write_Data>

	//VERTICAL SCROLL ZERO
	LCD_Write_Command(0x37);
 80008ee:	2037      	movs	r0, #55	; 0x37
 80008f0:	f000 fd32 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x00);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 fd51 	bl	800139c <LCD_Write_Data>

	//PIXEL FORMAT
	LCD_Write_Command(0x3A);
 80008fa:	203a      	movs	r0, #58	; 0x3a
 80008fc:	f000 fd2c 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x55);
 8000900:	2055      	movs	r0, #85	; 0x55
 8000902:	f000 fd4b 	bl	800139c <LCD_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	LCD_Write_Command(0xB1);
 8000906:	20b1      	movs	r0, #177	; 0xb1
 8000908:	f000 fd26 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x00);
 800090c:	2000      	movs	r0, #0
 800090e:	f000 fd45 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x18);
 8000912:	2018      	movs	r0, #24
 8000914:	f000 fd42 	bl	800139c <LCD_Write_Data>

	//DISPLAY FUNCTION CONTROL
	LCD_Write_Command(0xB6);
 8000918:	20b6      	movs	r0, #182	; 0xb6
 800091a:	f000 fd1d 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x08);
 800091e:	2008      	movs	r0, #8
 8000920:	f000 fd3c 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x82);
 8000924:	2082      	movs	r0, #130	; 0x82
 8000926:	f000 fd39 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x27);
 800092a:	2027      	movs	r0, #39	; 0x27
 800092c:	f000 fd36 	bl	800139c <LCD_Write_Data>

	//3GAMMA FUNCTION DISABLE
	LCD_Write_Command(0xF2);
 8000930:	20f2      	movs	r0, #242	; 0xf2
 8000932:	f000 fd11 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x00);
 8000936:	2000      	movs	r0, #0
 8000938:	f000 fd30 	bl	800139c <LCD_Write_Data>

	//GAMMA CURVE SELECTED
	LCD_Write_Command(0x26);
 800093c:	2026      	movs	r0, #38	; 0x26
 800093e:	f000 fd0b 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x01);
 8000942:	2001      	movs	r0, #1
 8000944:	f000 fd2a 	bl	800139c <LCD_Write_Data>

	//POSITIVE GAMMA CORRECTION
	LCD_Write_Command(0xE0);
 8000948:	20e0      	movs	r0, #224	; 0xe0
 800094a:	f000 fd05 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x0F);
 800094e:	200f      	movs	r0, #15
 8000950:	f000 fd24 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x31);
 8000954:	2031      	movs	r0, #49	; 0x31
 8000956:	f000 fd21 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x2B);
 800095a:	202b      	movs	r0, #43	; 0x2b
 800095c:	f000 fd1e 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 8000960:	200c      	movs	r0, #12
 8000962:	f000 fd1b 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x0E);
 8000966:	200e      	movs	r0, #14
 8000968:	f000 fd18 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x08);
 800096c:	2008      	movs	r0, #8
 800096e:	f000 fd15 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x4E);
 8000972:	204e      	movs	r0, #78	; 0x4e
 8000974:	f000 fd12 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0xF1);
 8000978:	20f1      	movs	r0, #241	; 0xf1
 800097a:	f000 fd0f 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x37);
 800097e:	2037      	movs	r0, #55	; 0x37
 8000980:	f000 fd0c 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x07);
 8000984:	2007      	movs	r0, #7
 8000986:	f000 fd09 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x10);
 800098a:	2010      	movs	r0, #16
 800098c:	f000 fd06 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x03);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 fd03 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x0E);
 8000996:	200e      	movs	r0, #14
 8000998:	f000 fd00 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x09);
 800099c:	2009      	movs	r0, #9
 800099e:	f000 fcfd 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x00);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 fcfa 	bl	800139c <LCD_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	LCD_Write_Command(0xE1);
 80009a8:	20e1      	movs	r0, #225	; 0xe1
 80009aa:	f000 fcd5 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x00);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fcf4 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x0E);
 80009b4:	200e      	movs	r0, #14
 80009b6:	f000 fcf1 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x14);
 80009ba:	2014      	movs	r0, #20
 80009bc:	f000 fcee 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x03);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 fceb 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x11);
 80009c6:	2011      	movs	r0, #17
 80009c8:	f000 fce8 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x07);
 80009cc:	2007      	movs	r0, #7
 80009ce:	f000 fce5 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x31);
 80009d2:	2031      	movs	r0, #49	; 0x31
 80009d4:	f000 fce2 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0xC1);
 80009d8:	20c1      	movs	r0, #193	; 0xc1
 80009da:	f000 fcdf 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x48);
 80009de:	2048      	movs	r0, #72	; 0x48
 80009e0:	f000 fcdc 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x08);
 80009e4:	2008      	movs	r0, #8
 80009e6:	f000 fcd9 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x0F);
 80009ea:	200f      	movs	r0, #15
 80009ec:	f000 fcd6 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 80009f0:	200c      	movs	r0, #12
 80009f2:	f000 fcd3 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x31);
 80009f6:	2031      	movs	r0, #49	; 0x31
 80009f8:	f000 fcd0 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x36);
 80009fc:	2036      	movs	r0, #54	; 0x36
 80009fe:	f000 fccd 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(0x0F);
 8000a02:	200f      	movs	r0, #15
 8000a04:	f000 fcca 	bl	800139c <LCD_Write_Data>

	//EXIT SLEEP
	LCD_Write_Command(0x11);
 8000a08:	2011      	movs	r0, #17
 8000a0a:	f000 fca5 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x80);
 8000a0e:	2080      	movs	r0, #128	; 0x80
 8000a10:	f000 fcc4 	bl	800139c <LCD_Write_Data>
	HAL_Delay(120);
 8000a14:	2078      	movs	r0, #120	; 0x78
 8000a16:	f000 fed9 	bl	80017cc <HAL_Delay>

	//TURN ON DISPLAY
	LCD_Write_Command(0x29);
 8000a1a:	2029      	movs	r0, #41	; 0x29
 8000a1c:	f000 fc9c 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(0x80);
 8000a20:	2080      	movs	r0, #128	; 0x80
 8000a22:	f000 fcbb 	bl	800139c <LCD_Write_Data>

	LCD_Write_Command(0x00);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 fc96 	bl	8001358 <LCD_Write_Command>

	//ORIENTACION
	LCD_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f917 	bl	8000c60 <LCD_Set_Rotation>

	LCD_Fill_Screen(RED);
 8000a32:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000a36:	f000 f805 	bl	8000a44 <LCD_Fill_Screen>

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40020800 	.word	0x40020800

08000a44 <LCD_Fill_Screen>:

// Llena toda la pantalla con un color
void LCD_Fill_Screen(uint16_t Colour)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	LCD_Set_Address(0, 0, deviceLCD.LCDSizeX, deviceLCD.LCDSizeY);
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <LCD_Fill_Screen+0x44>)
 8000a50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <LCD_Fill_Screen+0x44>)
 8000a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 f815 	bl	8000a8c <LCD_Set_Address>
	LCD_Draw_Colour_Burst(Colour, (deviceLCD.LCDSizeX)*(deviceLCD.LCDSizeY));
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <LCD_Fill_Screen+0x44>)
 8000a64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <LCD_Fill_Screen+0x44>)
 8000a6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8000a70:	fb02 f303 	mul.w	r3, r2, r3
 8000a74:	461a      	mov	r2, r3
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f852 	bl	8000b24 <LCD_Draw_Colour_Burst>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200000c0 	.word	0x200000c0

08000a8c <LCD_Set_Address>:


void LCD_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4604      	mov	r4, r0
 8000a94:	4608      	mov	r0, r1
 8000a96:	4611      	mov	r1, r2
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4623      	mov	r3, r4
 8000a9c:	80fb      	strh	r3, [r7, #6]
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80bb      	strh	r3, [r7, #4]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	807b      	strh	r3, [r7, #2]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	803b      	strh	r3, [r7, #0]
	LCD_Write_Command(0x2A);
 8000aaa:	202a      	movs	r0, #42	; 0x2a
 8000aac:	f000 fc54 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(X1>>8);
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fc6f 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(X1);
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fc6a 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(X2>>8);
 8000ac8:	887b      	ldrh	r3, [r7, #2]
 8000aca:	0a1b      	lsrs	r3, r3, #8
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fc63 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(X2);
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fc5e 	bl	800139c <LCD_Write_Data>

	LCD_Write_Command(0x2B);
 8000ae0:	202b      	movs	r0, #43	; 0x2b
 8000ae2:	f000 fc39 	bl	8001358 <LCD_Write_Command>
	LCD_Write_Data(Y1>>8);
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fc54 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(Y1);
 8000af4:	88bb      	ldrh	r3, [r7, #4]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fc4f 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(Y2>>8);
 8000afe:	883b      	ldrh	r3, [r7, #0]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fc48 	bl	800139c <LCD_Write_Data>
	LCD_Write_Data(Y2);
 8000b0c:	883b      	ldrh	r3, [r7, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fc43 	bl	800139c <LCD_Write_Data>

	LCD_Write_Command(0x2C);
 8000b16:	202c      	movs	r0, #44	; 0x2c
 8000b18:	f000 fc1e 	bl	8001358 <LCD_Write_Command>
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd90      	pop	{r4, r7, pc}

08000b24 <LCD_Draw_Colour_Burst>:


void LCD_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b28:	b08d      	sub	sp, #52	; 0x34
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	6039      	str	r1, [r7, #0]
 8000b30:	80fb      	strh	r3, [r7, #6]
 8000b32:	466b      	mov	r3, sp
 8000b34:	461e      	mov	r6, r3

	uint32_t Buffer_Size = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
	if((Size*2) < BURST_MAX_SIZE)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b42:	d202      	bcs.n	8000b4a <LCD_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
 8000b48:	e002      	b.n	8000b50 <LCD_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8000b4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_PORT_DC, LCD_PIN_DC, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b56:	4840      	ldr	r0, [pc, #256]	; (8000c58 <LCD_Draw_Colour_Burst+0x134>)
 8000b58:	f001 f8ee 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b62:	483d      	ldr	r0, [pc, #244]	; (8000c58 <LCD_Draw_Colour_Burst+0x134>)
 8000b64:	f001 f8e8 	bl	8001d38 <HAL_GPIO_WritePin>

	unsigned char chifted = 	Colour>>8;;
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	0a1b      	lsrs	r3, r3, #8
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[Buffer_Size];
 8000b72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b74:	460b      	mov	r3, r1
 8000b76:	3b01      	subs	r3, #1
 8000b78:	61fb      	str	r3, [r7, #28]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	4688      	mov	r8, r1
 8000b7e:	4699      	mov	r9, r3
 8000b80:	f04f 0200 	mov.w	r2, #0
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b94:	2300      	movs	r3, #0
 8000b96:	460c      	mov	r4, r1
 8000b98:	461d      	mov	r5, r3
 8000b9a:	f04f 0200 	mov.w	r2, #0
 8000b9e:	f04f 0300 	mov.w	r3, #0
 8000ba2:	00eb      	lsls	r3, r5, #3
 8000ba4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ba8:	00e2      	lsls	r2, r4, #3
 8000baa:	1dcb      	adds	r3, r1, #7
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	ebad 0d03 	sub.w	sp, sp, r3
 8000bb4:	466b      	mov	r3, sp
 8000bb6:	3300      	adds	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bbe:	e00e      	b.n	8000bde <LCD_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc4:	4413      	add	r3, r2
 8000bc6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000bca:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bce:	3301      	adds	r3, #1
 8000bd0:	88fa      	ldrh	r2, [r7, #6]
 8000bd2:	b2d1      	uxtb	r1, r2
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bda:	3302      	adds	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d3ec      	bcc.n	8000bc0 <LCD_Draw_Colour_Burst+0x9c>
	}

	uint32_t Sending_Size = Size*2;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf4:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8000bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c00:	fb01 f202 	mul.w	r2, r1, r2
 8000c04:	1a9b      	subs	r3, r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]

	if(Sending_in_Block != 0)
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d010      	beq.n	8000c30 <LCD_Draw_Colour_Burst+0x10c>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c12:	e009      	b.n	8000c28 <LCD_Draw_Colour_Burst+0x104>
		{
			HAL_SPI_Transmit(&(deviceLCD.SPI_Handle), (unsigned char *)burst_buffer, Buffer_Size, 10);
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	230a      	movs	r3, #10
 8000c1a:	69b9      	ldr	r1, [r7, #24]
 8000c1c:	480f      	ldr	r0, [pc, #60]	; (8000c5c <LCD_Draw_Colour_Burst+0x138>)
 8000c1e:	f001 fed0 	bl	80029c2 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c24:	3301      	adds	r3, #1
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3f1      	bcc.n	8000c14 <LCD_Draw_Colour_Burst+0xf0>
		}
	}


	HAL_SPI_Transmit(&(deviceLCD.SPI_Handle), (unsigned char *)burst_buffer, Remainder_from_block, 10);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	230a      	movs	r3, #10
 8000c36:	69b9      	ldr	r1, [r7, #24]
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <LCD_Draw_Colour_Burst+0x138>)
 8000c3a:	f001 fec2 	bl	80029c2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <LCD_Draw_Colour_Burst+0x134>)
 8000c46:	f001 f877 	bl	8001d38 <HAL_GPIO_WritePin>
 8000c4a:	46b5      	mov	sp, r6
}
 8000c4c:	bf00      	nop
 8000c4e:	3734      	adds	r7, #52	; 0x34
 8000c50:	46bd      	mov	sp, r7
 8000c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c56:	bf00      	nop
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	200000c0 	.word	0x200000c0

08000c60 <LCD_Set_Rotation>:


void LCD_Set_Rotation(uint8_t Rotation)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	uint8_t screen_rotation = Rotation;
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	73fb      	strb	r3, [r7, #15]

	LCD_Write_Command(0x36);
 8000c6e:	2036      	movs	r0, #54	; 0x36
 8000c70:	f000 fb72 	bl	8001358 <LCD_Write_Command>
	HAL_Delay(1);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f000 fda9 	bl	80017cc <HAL_Delay>

	switch(screen_rotation)
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d83f      	bhi.n	8000d00 <LCD_Set_Rotation+0xa0>
 8000c80:	a201      	add	r2, pc, #4	; (adr r2, 8000c88 <LCD_Set_Rotation+0x28>)
 8000c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c86:	bf00      	nop
 8000c88:	08000c99 	.word	0x08000c99
 8000c8c:	08000cb3 	.word	0x08000cb3
 8000c90:	08000ccd 	.word	0x08000ccd
 8000c94:	08000ce7 	.word	0x08000ce7
	{
		case SCREEN_VERTICAL_1:
			LCD_Write_Data(0x40|0x08);
 8000c98:	2048      	movs	r0, #72	; 0x48
 8000c9a:	f000 fb7f 	bl	800139c <LCD_Write_Data>
			deviceLCD.LCDSizeX = 240;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <LCD_Set_Rotation+0xac>)
 8000ca0:	22f0      	movs	r2, #240	; 0xf0
 8000ca2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			deviceLCD.LCDSizeY = 320;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <LCD_Set_Rotation+0xac>)
 8000ca8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000cac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			break;
 8000cb0:	e027      	b.n	8000d02 <LCD_Set_Rotation+0xa2>
		case SCREEN_HORIZONTAL_1:
			LCD_Write_Data(0x20|0x08);
 8000cb2:	2028      	movs	r0, #40	; 0x28
 8000cb4:	f000 fb72 	bl	800139c <LCD_Write_Data>
			deviceLCD.LCDSizeX = 320;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <LCD_Set_Rotation+0xac>)
 8000cba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000cbe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			deviceLCD.LCDSizeY = 240;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <LCD_Set_Rotation+0xac>)
 8000cc4:	22f0      	movs	r2, #240	; 0xf0
 8000cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			break;
 8000cca:	e01a      	b.n	8000d02 <LCD_Set_Rotation+0xa2>
		case SCREEN_VERTICAL_2:
			LCD_Write_Data(0x80|0x08);
 8000ccc:	2088      	movs	r0, #136	; 0x88
 8000cce:	f000 fb65 	bl	800139c <LCD_Write_Data>
			deviceLCD.LCDSizeX = 240;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <LCD_Set_Rotation+0xac>)
 8000cd4:	22f0      	movs	r2, #240	; 0xf0
 8000cd6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			deviceLCD.LCDSizeY = 320;
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <LCD_Set_Rotation+0xac>)
 8000cdc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ce0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			break;
 8000ce4:	e00d      	b.n	8000d02 <LCD_Set_Rotation+0xa2>
		case SCREEN_HORIZONTAL_2:
			LCD_Write_Data(0x40|0x80|0x20|0x08);
 8000ce6:	20e8      	movs	r0, #232	; 0xe8
 8000ce8:	f000 fb58 	bl	800139c <LCD_Write_Data>
			deviceLCD.LCDSizeX = 320;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <LCD_Set_Rotation+0xac>)
 8000cee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000cf2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			deviceLCD.LCDSizeY = 240;
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <LCD_Set_Rotation+0xac>)
 8000cf8:	22f0      	movs	r2, #240	; 0xf0
 8000cfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			break;
 8000cfe:	e000      	b.n	8000d02 <LCD_Set_Rotation+0xa2>
		default:
			// Sale si la orientacion no es valida
			break;
 8000d00:	bf00      	nop
	}
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200000c0 	.word	0x200000c0

08000d10 <LCD_Draw_Filled_Circle>:
    }
}


void LCD_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b08b      	sub	sp, #44	; 0x2c
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4604      	mov	r4, r0
 8000d18:	4608      	mov	r0, r1
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4623      	mov	r3, r4
 8000d20:	80fb      	strh	r3, [r7, #6]
 8000d22:	4603      	mov	r3, r0
 8000d24:	80bb      	strh	r3, [r7, #4]
 8000d26:	460b      	mov	r3, r1
 8000d28:	807b      	strh	r3, [r7, #2]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	803b      	strh	r3, [r7, #0]

	int x = Radius;
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	f1c3 0301 	rsb	r3, r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8000d48:	e061      	b.n	8000e0e <LCD_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8000d4a:	88fa      	ldrh	r2, [r7, #6]
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	e018      	b.n	8000d86 <LCD_Draw_Filled_Circle+0x76>
        {
            LCD_Draw_Pixel(i, Y + y,Colour);
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	b298      	uxth	r0, r3
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	88bb      	ldrh	r3, [r7, #4]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	883a      	ldrh	r2, [r7, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f000 fa59 	bl	800121c <LCD_Draw_Pixel>
            LCD_Draw_Pixel(i, Y - y,Colour);
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	b298      	uxth	r0, r3
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	88ba      	ldrh	r2, [r7, #4]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	883a      	ldrh	r2, [r7, #0]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f000 fa4e 	bl	800121c <LCD_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	3301      	adds	r3, #1
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	4413      	add	r3, r2
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	dde0      	ble.n	8000d54 <LCD_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000d92:	88fa      	ldrh	r2, [r7, #6]
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e018      	b.n	8000dce <LCD_Draw_Filled_Circle+0xbe>
        {
            LCD_Draw_Pixel(i, Y + x,Colour);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	b298      	uxth	r0, r3
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	88bb      	ldrh	r3, [r7, #4]
 8000da6:	4413      	add	r3, r2
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	883a      	ldrh	r2, [r7, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f000 fa35 	bl	800121c <LCD_Draw_Pixel>
            LCD_Draw_Pixel(i, Y - x,Colour);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	b298      	uxth	r0, r3
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	88ba      	ldrh	r2, [r7, #4]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	883a      	ldrh	r2, [r7, #0]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f000 fa2a 	bl	800121c <LCD_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	88fa      	ldrh	r2, [r7, #6]
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	dde0      	ble.n	8000d9c <LCD_Draw_Filled_Circle+0x8c>
        }

        y++;
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	4413      	add	r3, r2
 8000de6:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	3302      	adds	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005a      	lsls	r2, r3, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	4413      	add	r3, r2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	dd09      	ble.n	8000e0e <LCD_Draw_Filled_Circle+0xfe>
        {
            x--;
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	4413      	add	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8000e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	da99      	bge.n	8000d4a <LCD_Draw_Filled_Circle+0x3a>
        }
    }

}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	372c      	adds	r7, #44	; 0x2c
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd90      	pop	{r4, r7, pc}

08000e20 <LCD_Draw_Filled_Rectangle_Coord>:

}


void LCD_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	4604      	mov	r4, r0
 8000e28:	4608      	mov	r0, r1
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4623      	mov	r3, r4
 8000e30:	80fb      	strh	r3, [r7, #6]
 8000e32:	4603      	mov	r3, r0
 8000e34:	80bb      	strh	r3, [r7, #4]
 8000e36:	460b      	mov	r3, r1
 8000e38:	807b      	strh	r3, [r7, #2]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	82bb      	strh	r3, [r7, #20]
	uint8_t	Negative_X = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	60bb      	str	r3, [r7, #8]

	if(Calc_Negative < 0)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	da01      	bge.n	8000e6c <LCD_Draw_Filled_Rectangle_Coord+0x4c>
		Negative_X = 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	74fb      	strb	r3, [r7, #19]

	Calc_Negative = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 8000e70:	883a      	ldrh	r2, [r7, #0]
 8000e72:	88bb      	ldrh	r3, [r7, #4]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	60bb      	str	r3, [r7, #8]

	if(Calc_Negative < 0)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da01      	bge.n	8000e82 <LCD_Draw_Filled_Rectangle_Coord+0x62>
		Negative_Y = 1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	74bb      	strb	r3, [r7, #18]

	if(!Negative_X)
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d106      	bne.n	8000e96 <LCD_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8000e88:	887a      	ldrh	r2, [r7, #2]
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	823b      	strh	r3, [r7, #16]
 8000e94:	e005      	b.n	8000ea2 <LCD_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8000e96:	88fa      	ldrh	r2, [r7, #6]
 8000e98:	887b      	ldrh	r3, [r7, #2]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	823b      	strh	r3, [r7, #16]
	}

	if(!Negative_Y)
 8000ea2:	7cbb      	ldrb	r3, [r7, #18]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d106      	bne.n	8000eb6 <LCD_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8000ea8:	883a      	ldrh	r2, [r7, #0]
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	81fb      	strh	r3, [r7, #14]
 8000eb4:	e005      	b.n	8000ec2 <LCD_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8000eb6:	88ba      	ldrh	r2, [r7, #4]
 8000eb8:	883b      	ldrh	r3, [r7, #0]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8000ebe:	883b      	ldrh	r3, [r7, #0]
 8000ec0:	81fb      	strh	r3, [r7, #14]
	}

	LCD_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8000ec2:	8abc      	ldrh	r4, [r7, #20]
 8000ec4:	8afa      	ldrh	r2, [r7, #22]
 8000ec6:	89f9      	ldrh	r1, [r7, #14]
 8000ec8:	8a38      	ldrh	r0, [r7, #16]
 8000eca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	4623      	mov	r3, r4
 8000ed0:	f000 f8c6 	bl	8001060 <LCD_Draw_Rectangle>
}
 8000ed4:	bf00      	nop
 8000ed6:	371c      	adds	r7, #28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd90      	pop	{r4, r7, pc}

08000edc <LCD_Draw_Char>:


void LCD_Draw_Char(char Character, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4623      	mov	r3, r4
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80bb      	strh	r3, [r7, #4]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	807b      	strh	r3, [r7, #2]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	803b      	strh	r3, [r7, #0]
	uint8_t function_char;
    uint8_t	i,j;
	char temp[CHAR_WIDTH];

	function_char = Character;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	75fb      	strb	r3, [r7, #23]

    if (function_char < ' ')
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	2b1f      	cmp	r3, #31
 8000f02:	d802      	bhi.n	8000f0a <LCD_Draw_Char+0x2e>
    	Character = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	e002      	b.n	8000f10 <LCD_Draw_Char+0x34>
    else
    {
    	function_char -= 32;
 8000f0a:	7dfb      	ldrb	r3, [r7, #23]
 8000f0c:	3b20      	subs	r3, #32
 8000f0e:	75fb      	strb	r3, [r7, #23]
    }

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	753b      	strb	r3, [r7, #20]
 8000f14:	e012      	b.n	8000f3c <LCD_Draw_Char+0x60>
			temp[k] = font[function_char][k];
 8000f16:	7dfa      	ldrb	r2, [r7, #23]
 8000f18:	7d38      	ldrb	r0, [r7, #20]
 8000f1a:	7d39      	ldrb	r1, [r7, #20]
 8000f1c:	4c38      	ldr	r4, [pc, #224]	; (8001000 <LCD_Draw_Char+0x124>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4423      	add	r3, r4
 8000f28:	4403      	add	r3, r0
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	f101 0318 	add.w	r3, r1, #24
 8000f30:	443b      	add	r3, r7
 8000f32:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000f36:	7d3b      	ldrb	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	753b      	strb	r3, [r7, #20]
 8000f3c:	7d3b      	ldrb	r3, [r7, #20]
 8000f3e:	2b05      	cmp	r3, #5
 8000f40:	d9e9      	bls.n	8000f16 <LCD_Draw_Char+0x3a>

	LCD_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000f42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f44:	461a      	mov	r2, r3
 8000f46:	0052      	lsls	r2, r2, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	b29c      	uxth	r4, r3
 8000f54:	8879      	ldrh	r1, [r7, #2]
 8000f56:	88b8      	ldrh	r0, [r7, #4]
 8000f58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	4623      	mov	r3, r4
 8000f5e:	f000 f87f 	bl	8001060 <LCD_Draw_Rectangle>

    for (j=0; j<CHAR_WIDTH; j++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	757b      	strb	r3, [r7, #21]
 8000f66:	e043      	b.n	8000ff0 <LCD_Draw_Char+0x114>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	75bb      	strb	r3, [r7, #22]
 8000f6c:	e03a      	b.n	8000fe4 <LCD_Draw_Char+0x108>
            if (temp[j] & (1<<i)) {
 8000f6e:	7d7b      	ldrb	r3, [r7, #21]
 8000f70:	3318      	adds	r3, #24
 8000f72:	443b      	add	r3, r7
 8000f74:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	7dbb      	ldrb	r3, [r7, #22]
 8000f7c:	fa42 f303 	asr.w	r3, r2, r3
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d02a      	beq.n	8000fde <LCD_Draw_Char+0x102>
				if(Size == 1)
 8000f88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d10e      	bne.n	8000fac <LCD_Draw_Char+0xd0>
					LCD_Draw_Pixel(X+j, Y+i, Colour);
 8000f8e:	7d7b      	ldrb	r3, [r7, #21]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	b298      	uxth	r0, r3
 8000f98:	7dbb      	ldrb	r3, [r7, #22]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	883a      	ldrh	r2, [r7, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f000 f939 	bl	800121c <LCD_Draw_Pixel>
 8000faa:	e018      	b.n	8000fde <LCD_Draw_Char+0x102>
				else
					LCD_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000fac:	7d7b      	ldrb	r3, [r7, #21]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000fb2:	fb12 f303 	smulbb	r3, r2, r3
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	b298      	uxth	r0, r3
 8000fbe:	7dbb      	ldrb	r3, [r7, #22]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000fc4:	fb12 f303 	smulbb	r3, r2, r3
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	4413      	add	r3, r2
 8000fce:	b299      	uxth	r1, r3
 8000fd0:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8000fd2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000fd4:	883b      	ldrh	r3, [r7, #0]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4623      	mov	r3, r4
 8000fda:	f000 f841 	bl	8001060 <LCD_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000fde:	7dbb      	ldrb	r3, [r7, #22]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	75bb      	strb	r3, [r7, #22]
 8000fe4:	7dbb      	ldrb	r3, [r7, #22]
 8000fe6:	2b07      	cmp	r3, #7
 8000fe8:	d9c1      	bls.n	8000f6e <LCD_Draw_Char+0x92>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000fea:	7d7b      	ldrb	r3, [r7, #21]
 8000fec:	3301      	adds	r3, #1
 8000fee:	757b      	strb	r3, [r7, #21]
 8000ff0:	7d7b      	ldrb	r3, [r7, #21]
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	d9b8      	bls.n	8000f68 <LCD_Draw_Char+0x8c>
            }
        }
    }
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	371c      	adds	r7, #28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	080039fc 	.word	0x080039fc

08001004 <LCD_Draw_Text>:


void LCD_Draw_Text(const char* Text, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b087      	sub	sp, #28
 8001008:	af02      	add	r7, sp, #8
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	4608      	mov	r0, r1
 800100e:	4611      	mov	r1, r2
 8001010:	461a      	mov	r2, r3
 8001012:	4603      	mov	r3, r0
 8001014:	817b      	strh	r3, [r7, #10]
 8001016:	460b      	mov	r3, r1
 8001018:	813b      	strh	r3, [r7, #8]
 800101a:	4613      	mov	r3, r2
 800101c:	80fb      	strh	r3, [r7, #6]
    while (*Text)
 800101e:	e016      	b.n	800104e <LCD_Draw_Text+0x4a>
    {
        LCD_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	60fa      	str	r2, [r7, #12]
 8001026:	7818      	ldrb	r0, [r3, #0]
 8001028:	88fc      	ldrh	r4, [r7, #6]
 800102a:	893a      	ldrh	r2, [r7, #8]
 800102c:	8979      	ldrh	r1, [r7, #10]
 800102e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	8c3b      	ldrh	r3, [r7, #32]
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	4623      	mov	r3, r4
 8001038:	f7ff ff50 	bl	8000edc <LCD_Draw_Char>
        X += CHAR_WIDTH*Size;
 800103c:	8c3b      	ldrh	r3, [r7, #32]
 800103e:	461a      	mov	r2, r3
 8001040:	0052      	lsls	r2, r2, #1
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	b29a      	uxth	r2, r3
 8001048:	897b      	ldrh	r3, [r7, #10]
 800104a:	4413      	add	r3, r2
 800104c:	817b      	strh	r3, [r7, #10]
    while (*Text)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1e4      	bne.n	8001020 <LCD_Draw_Text+0x1c>
    }
}
 8001056:	bf00      	nop
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bd90      	pop	{r4, r7, pc}

08001060 <LCD_Draw_Rectangle>:

void LCD_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4604      	mov	r4, r0
 8001068:	4608      	mov	r0, r1
 800106a:	4611      	mov	r1, r2
 800106c:	461a      	mov	r2, r3
 800106e:	4623      	mov	r3, r4
 8001070:	80fb      	strh	r3, [r7, #6]
 8001072:	4603      	mov	r3, r0
 8001074:	80bb      	strh	r3, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	807b      	strh	r3, [r7, #2]
 800107a:	4613      	mov	r3, r2
 800107c:	803b      	strh	r3, [r7, #0]
	if((X >=deviceLCD.LCDSizeX) || (Y >= deviceLCD.LCDSizeY))
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <LCD_Draw_Rectangle+0xb0>)
 8001080:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001084:	88fa      	ldrh	r2, [r7, #6]
 8001086:	429a      	cmp	r2, r3
 8001088:	d23d      	bcs.n	8001106 <LCD_Draw_Rectangle+0xa6>
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <LCD_Draw_Rectangle+0xb0>)
 800108c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001090:	88ba      	ldrh	r2, [r7, #4]
 8001092:	429a      	cmp	r2, r3
 8001094:	d237      	bcs.n	8001106 <LCD_Draw_Rectangle+0xa6>
		return;

	if((X+Width-1) >= deviceLCD.LCDSizeX)
 8001096:	88fa      	ldrh	r2, [r7, #6]
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	4413      	add	r3, r2
 800109c:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <LCD_Draw_Rectangle+0xb0>)
 800109e:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 80010a2:	4293      	cmp	r3, r2
 80010a4:	dd05      	ble.n	80010b2 <LCD_Draw_Rectangle+0x52>
	{
		Width = deviceLCD.LCDSizeX-X;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <LCD_Draw_Rectangle+0xb0>)
 80010a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	807b      	strh	r3, [r7, #2]
	}
	if((Y+Height-1) >= deviceLCD.LCDSizeY)
 80010b2:	88ba      	ldrh	r2, [r7, #4]
 80010b4:	883b      	ldrh	r3, [r7, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a15      	ldr	r2, [pc, #84]	; (8001110 <LCD_Draw_Rectangle+0xb0>)
 80010ba:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 80010be:	4293      	cmp	r3, r2
 80010c0:	dd05      	ble.n	80010ce <LCD_Draw_Rectangle+0x6e>
	{
		Height = deviceLCD.LCDSizeY-Y;
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <LCD_Draw_Rectangle+0xb0>)
 80010c4:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
 80010c8:	88bb      	ldrh	r3, [r7, #4]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	803b      	strh	r3, [r7, #0]
	}

	LCD_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80010ce:	88fa      	ldrh	r2, [r7, #6]
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	4413      	add	r3, r2
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b29c      	uxth	r4, r3
 80010da:	88ba      	ldrh	r2, [r7, #4]
 80010dc:	883b      	ldrh	r3, [r7, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	88b9      	ldrh	r1, [r7, #4]
 80010e8:	88f8      	ldrh	r0, [r7, #6]
 80010ea:	4622      	mov	r2, r4
 80010ec:	f7ff fcce 	bl	8000a8c <LCD_Set_Address>
	LCD_Draw_Colour_Burst(Colour, Height*Width);
 80010f0:	883b      	ldrh	r3, [r7, #0]
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	fb02 f303 	mul.w	r3, r2, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	8b3b      	ldrh	r3, [r7, #24]
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fd10 	bl	8000b24 <LCD_Draw_Colour_Burst>
 8001104:	e000      	b.n	8001108 <LCD_Draw_Rectangle+0xa8>
		return;
 8001106:	bf00      	nop
}
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop
 8001110:	200000c0 	.word	0x200000c0

08001114 <LCD_Draw_Horizontal_Line>:


void LCD_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4604      	mov	r4, r0
 800111c:	4608      	mov	r0, r1
 800111e:	4611      	mov	r1, r2
 8001120:	461a      	mov	r2, r3
 8001122:	4623      	mov	r3, r4
 8001124:	80fb      	strh	r3, [r7, #6]
 8001126:	4603      	mov	r3, r0
 8001128:	80bb      	strh	r3, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	807b      	strh	r3, [r7, #2]
 800112e:	4613      	mov	r3, r2
 8001130:	803b      	strh	r3, [r7, #0]
	if((X >= deviceLCD.LCDSizeX) || (Y >= deviceLCD.LCDSizeY))
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <LCD_Draw_Horizontal_Line+0x80>)
 8001134:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	429a      	cmp	r2, r3
 800113c:	d225      	bcs.n	800118a <LCD_Draw_Horizontal_Line+0x76>
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <LCD_Draw_Horizontal_Line+0x80>)
 8001140:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001144:	88ba      	ldrh	r2, [r7, #4]
 8001146:	429a      	cmp	r2, r3
 8001148:	d21f      	bcs.n	800118a <LCD_Draw_Horizontal_Line+0x76>
		return;

	if((X+Width-1) >= deviceLCD.LCDSizeX)
 800114a:	88fa      	ldrh	r2, [r7, #6]
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	4413      	add	r3, r2
 8001150:	4a10      	ldr	r2, [pc, #64]	; (8001194 <LCD_Draw_Horizontal_Line+0x80>)
 8001152:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8001156:	4293      	cmp	r3, r2
 8001158:	dd05      	ble.n	8001166 <LCD_Draw_Horizontal_Line+0x52>
		Width = deviceLCD.LCDSizeX-X;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <LCD_Draw_Horizontal_Line+0x80>)
 800115c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	807b      	strh	r3, [r7, #2]

	LCD_Set_Address(X, Y, X+Width-1, Y);
 8001166:	88fa      	ldrh	r2, [r7, #6]
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	4413      	add	r3, r2
 800116c:	b29b      	uxth	r3, r3
 800116e:	3b01      	subs	r3, #1
 8001170:	b29a      	uxth	r2, r3
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	88b9      	ldrh	r1, [r7, #4]
 8001176:	88f8      	ldrh	r0, [r7, #6]
 8001178:	f7ff fc88 	bl	8000a8c <LCD_Set_Address>
	LCD_Draw_Colour_Burst(Colour, Width);
 800117c:	887a      	ldrh	r2, [r7, #2]
 800117e:	883b      	ldrh	r3, [r7, #0]
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fcce 	bl	8000b24 <LCD_Draw_Colour_Burst>
 8001188:	e000      	b.n	800118c <LCD_Draw_Horizontal_Line+0x78>
		return;
 800118a:	bf00      	nop
}
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	200000c0 	.word	0x200000c0

08001198 <LCD_Draw_Vertical_Line>:


void LCD_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4604      	mov	r4, r0
 80011a0:	4608      	mov	r0, r1
 80011a2:	4611      	mov	r1, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	4623      	mov	r3, r4
 80011a8:	80fb      	strh	r3, [r7, #6]
 80011aa:	4603      	mov	r3, r0
 80011ac:	80bb      	strh	r3, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	807b      	strh	r3, [r7, #2]
 80011b2:	4613      	mov	r3, r2
 80011b4:	803b      	strh	r3, [r7, #0]
	if((X >= deviceLCD.LCDSizeX) || (Y >= deviceLCD.LCDSizeY))
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <LCD_Draw_Vertical_Line+0x80>)
 80011b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80011bc:	88fa      	ldrh	r2, [r7, #6]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d225      	bcs.n	800120e <LCD_Draw_Vertical_Line+0x76>
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <LCD_Draw_Vertical_Line+0x80>)
 80011c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80011c8:	88ba      	ldrh	r2, [r7, #4]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d21f      	bcs.n	800120e <LCD_Draw_Vertical_Line+0x76>
		return;

	if((Y+Height-1)>=deviceLCD.LCDSizeY)
 80011ce:	88ba      	ldrh	r2, [r7, #4]
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a10      	ldr	r2, [pc, #64]	; (8001218 <LCD_Draw_Vertical_Line+0x80>)
 80011d6:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 80011da:	4293      	cmp	r3, r2
 80011dc:	dd05      	ble.n	80011ea <LCD_Draw_Vertical_Line+0x52>
		Height = deviceLCD.LCDSizeY-Y;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <LCD_Draw_Vertical_Line+0x80>)
 80011e0:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	807b      	strh	r3, [r7, #2]

	LCD_Set_Address(X, Y, X, Y+Height-1);
 80011ea:	88ba      	ldrh	r2, [r7, #4]
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	4413      	add	r3, r2
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	3b01      	subs	r3, #1
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	88fa      	ldrh	r2, [r7, #6]
 80011f8:	88b9      	ldrh	r1, [r7, #4]
 80011fa:	88f8      	ldrh	r0, [r7, #6]
 80011fc:	f7ff fc46 	bl	8000a8c <LCD_Set_Address>
	LCD_Draw_Colour_Burst(Colour, Height);
 8001200:	887a      	ldrh	r2, [r7, #2]
 8001202:	883b      	ldrh	r3, [r7, #0]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fc8c 	bl	8000b24 <LCD_Draw_Colour_Burst>
 800120c:	e000      	b.n	8001210 <LCD_Draw_Vertical_Line+0x78>
		return;
 800120e:	bf00      	nop
}
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bd90      	pop	{r4, r7, pc}
 8001216:	bf00      	nop
 8001218:	200000c0 	.word	0x200000c0

0800121c <LCD_Draw_Pixel>:

// Dibuja un pixel en la posicion indicada
void LCD_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
 8001226:	460b      	mov	r3, r1
 8001228:	80bb      	strh	r3, [r7, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	807b      	strh	r3, [r7, #2]
	if((X < deviceLCD.LCDSizeX) && (Y < deviceLCD.LCDSizeY))			//Verifica que la posicion este dentro de los limites de la pantalla
 800122e:	4b48      	ldr	r3, [pc, #288]	; (8001350 <LCD_Draw_Pixel+0x134>)
 8001230:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001234:	88fa      	ldrh	r2, [r7, #6]
 8001236:	429a      	cmp	r2, r3
 8001238:	f080 8086 	bcs.w	8001348 <LCD_Draw_Pixel+0x12c>
 800123c:	4b44      	ldr	r3, [pc, #272]	; (8001350 <LCD_Draw_Pixel+0x134>)
 800123e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001242:	88ba      	ldrh	r2, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	d27f      	bcs.n	8001348 <LCD_Draw_Pixel+0x12c>
	{
		unsigned char tempBuffer[4];

		LCD_Write_Command(0x2A);
 8001248:	202a      	movs	r0, #42	; 0x2a
 800124a:	f000 f885 	bl	8001358 <LCD_Write_Command>

		tempBuffer[0] = X>>8;
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	733b      	strb	r3, [r7, #12]
		tempBuffer[1] = X;
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	737b      	strb	r3, [r7, #13]
		tempBuffer[2] = (X+1)>>8;
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	3301      	adds	r3, #1
 8001262:	121b      	asrs	r3, r3, #8
 8001264:	b2db      	uxtb	r3, r3
 8001266:	73bb      	strb	r3, [r7, #14]
		tempBuffer[3] = X+1;
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	3301      	adds	r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(LCD_PORT_DC, LCD_PIN_DC, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001278:	4836      	ldr	r0, [pc, #216]	; (8001354 <LCD_Draw_Pixel+0x138>)
 800127a:	f000 fd5d 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001284:	4833      	ldr	r0, [pc, #204]	; (8001354 <LCD_Draw_Pixel+0x138>)
 8001286:	f000 fd57 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&(deviceLCD.SPI_Handle), tempBuffer, 4, 1);
 800128a:	f107 010c 	add.w	r1, r7, #12
 800128e:	2301      	movs	r3, #1
 8001290:	2204      	movs	r2, #4
 8001292:	482f      	ldr	r0, [pc, #188]	; (8001350 <LCD_Draw_Pixel+0x134>)
 8001294:	f001 fb95 	bl	80029c2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129e:	482d      	ldr	r0, [pc, #180]	; (8001354 <LCD_Draw_Pixel+0x138>)
 80012a0:	f000 fd4a 	bl	8001d38 <HAL_GPIO_WritePin>

		LCD_Write_Command(0x2B);
 80012a4:	202b      	movs	r0, #43	; 0x2b
 80012a6:	f000 f857 	bl	8001358 <LCD_Write_Command>

		tempBuffer[0] = Y>>8;
 80012aa:	88bb      	ldrh	r3, [r7, #4]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	733b      	strb	r3, [r7, #12]
		tempBuffer[1] = Y;
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	737b      	strb	r3, [r7, #13]
		tempBuffer[2] = (Y+1)>>8;
 80012ba:	88bb      	ldrh	r3, [r7, #4]
 80012bc:	3301      	adds	r3, #1
 80012be:	121b      	asrs	r3, r3, #8
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	73bb      	strb	r3, [r7, #14]
		tempBuffer[3] = Y+1;
 80012c4:	88bb      	ldrh	r3, [r7, #4]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3301      	adds	r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(LCD_PORT_DC, LCD_PIN_DC, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d4:	481f      	ldr	r0, [pc, #124]	; (8001354 <LCD_Draw_Pixel+0x138>)
 80012d6:	f000 fd2f 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e0:	481c      	ldr	r0, [pc, #112]	; (8001354 <LCD_Draw_Pixel+0x138>)
 80012e2:	f000 fd29 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&(deviceLCD.SPI_Handle), tempBuffer, 4, 1);
 80012e6:	f107 010c 	add.w	r1, r7, #12
 80012ea:	2301      	movs	r3, #1
 80012ec:	2204      	movs	r2, #4
 80012ee:	4818      	ldr	r0, [pc, #96]	; (8001350 <LCD_Draw_Pixel+0x134>)
 80012f0:	f001 fb67 	bl	80029c2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fa:	4816      	ldr	r0, [pc, #88]	; (8001354 <LCD_Draw_Pixel+0x138>)
 80012fc:	f000 fd1c 	bl	8001d38 <HAL_GPIO_WritePin>

		LCD_Write_Command(0x2C);
 8001300:	202c      	movs	r0, #44	; 0x2c
 8001302:	f000 f829 	bl	8001358 <LCD_Write_Command>

		tempBuffer[0] = Colour>>8;
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b29b      	uxth	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	733b      	strb	r3, [r7, #12]
		tempBuffer[1] = Colour;
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	737b      	strb	r3, [r7, #13]

		HAL_GPIO_WritePin(LCD_PORT_DC, LCD_PIN_DC, GPIO_PIN_SET);
 8001316:	2201      	movs	r2, #1
 8001318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <LCD_Draw_Pixel+0x138>)
 800131e:	f000 fd0b 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001328:	480a      	ldr	r0, [pc, #40]	; (8001354 <LCD_Draw_Pixel+0x138>)
 800132a:	f000 fd05 	bl	8001d38 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&(deviceLCD.SPI_Handle), tempBuffer, 2, 1);
 800132e:	f107 010c 	add.w	r1, r7, #12
 8001332:	2301      	movs	r3, #1
 8001334:	2202      	movs	r2, #2
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <LCD_Draw_Pixel+0x134>)
 8001338:	f001 fb43 	bl	80029c2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <LCD_Draw_Pixel+0x138>)
 8001344:	f000 fcf8 	bl	8001d38 <HAL_GPIO_WritePin>
	}

}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200000c0 	.word	0x200000c0
 8001354:	40020800 	.word	0x40020800

08001358 <LCD_Write_Command>:

/* Envia un comando (char) al LCD */
void LCD_Write_Command(uint8_t Command)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_RESET);		// Pone la señal CS (chip select) del SPI en bajo antes de mandar el comando. La vuelve a poner en alto cuando termina.
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <LCD_Write_Command+0x40>)
 800136a:	f000 fce5 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_DC, LCD_PIN_DC, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <LCD_Write_Command+0x40>)
 8001376:	f000 fcdf 	bl	8001d38 <HAL_GPIO_WritePin>
	LCD_SPI_Send(Command);
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f82f 	bl	80013e0 <LCD_SPI_Send>
	HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <LCD_Write_Command+0x40>)
 800138a:	f000 fcd5 	bl	8001d38 <HAL_GPIO_WritePin>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40020800 	.word	0x40020800

0800139c <LCD_Write_Data>:

/* Envia un dato (char) al LCD */
void LCD_Write_Data(uint8_t Data)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT_DC, LCD_PIN_DC, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <LCD_Write_Data+0x40>)
 80013ae:	f000 fcc3 	bl	8001d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <LCD_Write_Data+0x40>)
 80013ba:	f000 fcbd 	bl	8001d38 <HAL_GPIO_WritePin>
	LCD_SPI_Send(Data);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f80d 	bl	80013e0 <LCD_SPI_Send>
	HAL_GPIO_WritePin(LCD_PORT_CS, LCD_PIN_CS, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <LCD_Write_Data+0x40>)
 80013ce:	f000 fcb3 	bl	8001d38 <HAL_GPIO_WritePin>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40020800 	.word	0x40020800

080013e0 <LCD_SPI_Send>:

/* Reliza la transmision al LCD mediante el SPI */
void LCD_SPI_Send(unsigned char SPI_Data)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&(deviceLCD.SPI_Handle), &SPI_Data, 1, 1);
 80013ea:	1df9      	adds	r1, r7, #7
 80013ec:	2301      	movs	r3, #1
 80013ee:	2201      	movs	r2, #1
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <LCD_SPI_Send+0x20>)
 80013f2:	f001 fae6 	bl	80029c2 <HAL_SPI_Transmit>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200000c0 	.word	0x200000c0

08001404 <uartinit>:

// Funcion: inicializa el puerto UART con los parametros especificados
// Entrada: Ninguna
// Salida: True si se pudo abrir el puerto sin errores, false en caso contrario
bool_t uartinit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	// Configuracion del UART
	myUARTHandler.Instance			= USART3;
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <uartinit+0xa4>)
 800140a:	4a28      	ldr	r2, [pc, #160]	; (80014ac <uartinit+0xa8>)
 800140c:	601a      	str	r2, [r3, #0]
	myUARTHandler.Init.BaudRate		= DEFAULT_BAUDRATE;
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <uartinit+0xa4>)
 8001410:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001414:	605a      	str	r2, [r3, #4]
	myUARTHandler.Init.WordLength	= UART_WORDLENGTH_8B;
 8001416:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <uartinit+0xa4>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
	myUARTHandler.Init.StopBits		= UART_STOPBITS_1;
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <uartinit+0xa4>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
	myUARTHandler.Init.Parity		= UART_PARITY_ODD;
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <uartinit+0xa4>)
 8001424:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001428:	611a      	str	r2, [r3, #16]
	myUARTHandler.Init.HwFlowCtl	= UART_HWCONTROL_NONE;
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <uartinit+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
	myUARTHandler.Init.Mode			= UART_MODE_TX_RX;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <uartinit+0xa4>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
	myUARTHandler.Init.OverSampling	= UART_OVERSAMPLING_16;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <uartinit+0xa4>)
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(&myUARTHandler) != HAL_OK)
 800143c:	481a      	ldr	r0, [pc, #104]	; (80014a8 <uartinit+0xa4>)
 800143e:	f001 fce9 	bl	8002e14 <HAL_UART_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <uartinit+0x50>
	{
		// Error de inicializacion
		UART_Error_Handler();
 8001448:	f000 f87e 	bl	8001548 <UART_Error_Handler>
		UART_Init_OK = false;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <uartinit+0xac>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e025      	b.n	80014a0 <uartinit+0x9c>
	}
	else
	{
		UART_Init_OK = true;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <uartinit+0xac>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
		// Debug de configuracion del puerto
		uartSendString((uint8_t *)BAUDRATE);
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <uartinit+0xb0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f836 	bl	80014d0 <uartSendString>
		uartSendString((uint8_t *)WORD_LENGTH);
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <uartinit+0xb4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f000 f831 	bl	80014d0 <uartSendString>
		uartSendString((uint8_t *)STOP_BITS);
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <uartinit+0xb8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f82c 	bl	80014d0 <uartSendString>
		uartSendString((uint8_t *)PARITY);
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <uartinit+0xbc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f827 	bl	80014d0 <uartSendString>
		uartSendString((uint8_t *)HW_CTRL);
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <uartinit+0xc0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f822 	bl	80014d0 <uartSendString>
		uartSendString((uint8_t *)MODE);
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <uartinit+0xc4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f81d 	bl	80014d0 <uartSendString>
		uartSendString((uint8_t *)OVERSAMPLING);
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <uartinit+0xc8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f818 	bl	80014d0 <uartSendString>
	}

	return UART_Init_OK;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <uartinit+0xac>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000011c 	.word	0x2000011c
 80014ac:	40004800 	.word	0x40004800
 80014b0:	20000160 	.word	0x20000160
 80014b4:	2000006c 	.word	0x2000006c
 80014b8:	20000070 	.word	0x20000070
 80014bc:	20000074 	.word	0x20000074
 80014c0:	20000078 	.word	0x20000078
 80014c4:	2000007c 	.word	0x2000007c
 80014c8:	20000080 	.word	0x20000080
 80014cc:	20000084 	.word	0x20000084

080014d0 <uartSendString>:

// Funcion: Envia por UART el string pasado como argumento, usando el handler
// Entrada: Puntero al string a enviar
// Salida: Ninguna
void uartSendString(uint8_t * pstring)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	if((pstring != NULL) && UART_Init_OK)						// Chequea que el puntero y el handler esten inicializados
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00d      	beq.n	80014fa <uartSendString+0x2a>
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <uartSendString+0x34>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d009      	beq.n	80014fa <uartSendString+0x2a>
		HAL_UART_Transmit(&myUARTHandler, pstring, strlen((const char *)pstring), DEFAULT_TIMEOUT);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7fe fe8a 	bl	8000200 <strlen>
 80014ec:	4603      	mov	r3, r0
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	231e      	movs	r3, #30
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <uartSendString+0x38>)
 80014f6:	f001 fcda 	bl	8002eae <HAL_UART_Transmit>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000160 	.word	0x20000160
 8001508:	2000011c 	.word	0x2000011c

0800150c <uartReceiveStringSize>:

// Funcion: Recibe por UART la cantidad de bytes pasada por argumento, copiandolos en el buffer
// Entrada: Puntero y largo del string a enviar
// Salida: Ninguna
void uartReceiveStringSize(uint8_t * pstring, uint16_t size)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
	if((pstring != NULL) && (size > 0) && UART_Init_OK)			// Chequea que la cantidad de bytes a recibir sea positiva y que el puntero y el handler esten inicializados
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00c      	beq.n	8001538 <uartReceiveStringSize+0x2c>
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <uartReceiveStringSize+0x2c>
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <uartReceiveStringSize+0x34>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <uartReceiveStringSize+0x2c>
		HAL_UART_Receive(&myUARTHandler, pstring, size, DEFAULT_TIMEOUT);
 800152c:	887a      	ldrh	r2, [r7, #2]
 800152e:	231e      	movs	r3, #30
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4804      	ldr	r0, [pc, #16]	; (8001544 <uartReceiveStringSize+0x38>)
 8001534:	f001 fd4d 	bl	8002fd2 <HAL_UART_Receive>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000160 	.word	0x20000160
 8001544:	2000011c 	.word	0x2000011c

08001548 <UART_Error_Handler>:

static void UART_Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10e      	bne.n	8001586 <BSP_LED_Init+0x2e>
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <BSP_LED_Init+0x94>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	4a1e      	ldr	r2, [pc, #120]	; (80015ec <BSP_LED_Init+0x94>)
 8001572:	f043 0302 	orr.w	r3, r3, #2
 8001576:	6313      	str	r3, [r2, #48]	; 0x30
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <BSP_LED_Init+0x94>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	e00d      	b.n	80015a2 <BSP_LED_Init+0x4a>
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <BSP_LED_Init+0x94>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <BSP_LED_Init+0x94>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <BSP_LED_Init+0x94>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <BSP_LED_Init+0x98>)
 80015a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <BSP_LED_Init+0x9c>)
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	f107 0214 	add.w	r2, r7, #20
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fa0a 	bl	80019e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <BSP_LED_Init+0x9c>)
 80015d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <BSP_LED_Init+0x98>)
 80015d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015dc:	2200      	movs	r2, #0
 80015de:	4619      	mov	r1, r3
 80015e0:	f000 fbaa 	bl	8001d38 <HAL_GPIO_WritePin>
}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	08003c3c 	.word	0x08003c3c
 80015f4:	20000088 	.word	0x20000088

080015f8 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <BSP_LED_On+0x2c>)
 8001606:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <BSP_LED_On+0x30>)
 800160e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001612:	2201      	movs	r2, #1
 8001614:	4619      	mov	r1, r3
 8001616:	f000 fb8f 	bl	8001d38 <HAL_GPIO_WritePin>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000088 	.word	0x20000088
 8001628:	08003c3c 	.word	0x08003c3c

0800162c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <SystemInit+0x60>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a15      	ldr	r2, [pc, #84]	; (800168c <SystemInit+0x60>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <SystemInit+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <SystemInit+0x64>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <SystemInit+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <SystemInit+0x64>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <SystemInit+0x64>)
 8001658:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800165c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <SystemInit+0x64>)
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <SystemInit+0x68>)
 8001666:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <SystemInit+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a08      	ldr	r2, [pc, #32]	; (8001690 <SystemInit+0x64>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <SystemInit+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SystemInit+0x60>)
 800167c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001680:	609a      	str	r2, [r3, #8]
#endif
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	40023800 	.word	0x40023800
 8001694:	24003010 	.word	0x24003010

08001698 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler+0x4>

080016b2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <UsageFault_Handler+0x4>

080016be <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80016ec:	f000 f84e 	bl	800178c <HAL_IncTick>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_Init+0x34>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_Init+0x34>)
 80016fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001702:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_Init+0x34>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_Init+0x34>)
 800170a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001710:	2003      	movs	r0, #3
 8001712:	f000 f931 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001716:	200f      	movs	r0, #15
 8001718:	f000 f808 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800171c:	f000 fbd0 	bl	8001ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023c00 	.word	0x40023c00

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x54>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x58>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f93b 	bl	80019c6 <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f000 f911 	bl	800198e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_InitTick+0x5c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000094 	.word	0x20000094
 8001784:	2000009c 	.word	0x2000009c
 8001788:	20000098 	.word	0x20000098

0800178c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x20>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x24>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_IncTick+0x24>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	2000009c 	.word	0x2000009c
 80017b0:	20000164 	.word	0x20000164

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000164 	.word	0x20000164

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000009c 	.word	0x2000009c

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db0a      	blt.n	80018a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <__NVIC_SetPriority+0x4c>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	440b      	add	r3, r1
 800189c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a0:	e00a      	b.n	80018b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4908      	ldr	r1, [pc, #32]	; (80018c8 <__NVIC_SetPriority+0x50>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3b04      	subs	r3, #4
 80018b0:	0112      	lsls	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	440b      	add	r3, r1
 80018b6:	761a      	strb	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f1c3 0307 	rsb	r3, r3, #7
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	bf28      	it	cs
 80018ea:	2304      	movcs	r3, #4
 80018ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3304      	adds	r3, #4
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d902      	bls.n	80018fc <NVIC_EncodePriority+0x30>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3b03      	subs	r3, #3
 80018fa:	e000      	b.n	80018fe <NVIC_EncodePriority+0x32>
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	43d9      	mvns	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	4313      	orrs	r3, r2
         );
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001944:	d301      	bcc.n	800194a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SysTick_Config+0x40>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001952:	210f      	movs	r1, #15
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7ff ff8e 	bl	8001878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SysTick_Config+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <SysTick_Config+0x40>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff47 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff5c 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff8e 	bl	80018cc <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5d 	bl	8001878 <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffb0 	bl	8001934 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e177      	b.n	8001cec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 8166 	bne.w	8001ce6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d005      	beq.n	8001a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d130      	bne.n	8001a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d017      	beq.n	8001ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80c0 	beq.w	8001ce6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a65      	ldr	r2, [pc, #404]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b82:	4a61      	ldr	r2, [pc, #388]	; (8001d08 <HAL_GPIO_Init+0x328>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a58      	ldr	r2, [pc, #352]	; (8001d0c <HAL_GPIO_Init+0x32c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d037      	beq.n	8001c1e <HAL_GPIO_Init+0x23e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a57      	ldr	r2, [pc, #348]	; (8001d10 <HAL_GPIO_Init+0x330>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d031      	beq.n	8001c1a <HAL_GPIO_Init+0x23a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a56      	ldr	r2, [pc, #344]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02b      	beq.n	8001c16 <HAL_GPIO_Init+0x236>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a55      	ldr	r2, [pc, #340]	; (8001d18 <HAL_GPIO_Init+0x338>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d025      	beq.n	8001c12 <HAL_GPIO_Init+0x232>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a54      	ldr	r2, [pc, #336]	; (8001d1c <HAL_GPIO_Init+0x33c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01f      	beq.n	8001c0e <HAL_GPIO_Init+0x22e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a53      	ldr	r2, [pc, #332]	; (8001d20 <HAL_GPIO_Init+0x340>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d019      	beq.n	8001c0a <HAL_GPIO_Init+0x22a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_GPIO_Init+0x344>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d013      	beq.n	8001c06 <HAL_GPIO_Init+0x226>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a51      	ldr	r2, [pc, #324]	; (8001d28 <HAL_GPIO_Init+0x348>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00d      	beq.n	8001c02 <HAL_GPIO_Init+0x222>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a50      	ldr	r2, [pc, #320]	; (8001d2c <HAL_GPIO_Init+0x34c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d007      	beq.n	8001bfe <HAL_GPIO_Init+0x21e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4f      	ldr	r2, [pc, #316]	; (8001d30 <HAL_GPIO_Init+0x350>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_GPIO_Init+0x21a>
 8001bf6:	2309      	movs	r3, #9
 8001bf8:	e012      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001bfa:	230a      	movs	r3, #10
 8001bfc:	e010      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001bfe:	2308      	movs	r3, #8
 8001c00:	e00e      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c02:	2307      	movs	r3, #7
 8001c04:	e00c      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c06:	2306      	movs	r3, #6
 8001c08:	e00a      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c0a:	2305      	movs	r3, #5
 8001c0c:	e008      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c0e:	2304      	movs	r3, #4
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c12:	2303      	movs	r3, #3
 8001c14:	e004      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e002      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_Init+0x240>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	f002 0203 	and.w	r2, r2, #3
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	4093      	lsls	r3, r2
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c30:	4935      	ldr	r1, [pc, #212]	; (8001d08 <HAL_GPIO_Init+0x328>)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_GPIO_Init+0x354>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c62:	4a34      	ldr	r2, [pc, #208]	; (8001d34 <HAL_GPIO_Init+0x354>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c68:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <HAL_GPIO_Init+0x354>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8c:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <HAL_GPIO_Init+0x354>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c92:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <HAL_GPIO_Init+0x354>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <HAL_GPIO_Init+0x354>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_GPIO_Init+0x354>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <HAL_GPIO_Init+0x354>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b0f      	cmp	r3, #15
 8001cf0:	f67f ae84 	bls.w	80019fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40021400 	.word	0x40021400
 8001d24:	40021800 	.word	0x40021800
 8001d28:	40021c00 	.word	0x40021c00
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40022400 	.word	0x40022400
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
 8001d44:	4613      	mov	r3, r2
 8001d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d54:	e003      	b.n	8001d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d56:	887b      	ldrh	r3, [r7, #2]
 8001d58:	041a      	lsls	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	619a      	str	r2, [r3, #24]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_UART_MspInit+0x9c>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <HAL_UART_MspInit+0x9c>)
 8001d7e:	f043 0308 	orr.w	r3, r3, #8
 8001d82:	6313      	str	r3, [r2, #48]	; 0x30
 8001d84:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_UART_MspInit+0x9c>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <HAL_UART_MspInit+0x9c>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <HAL_UART_MspInit+0x9c>)
 8001d9a:	f043 0308 	orr.w	r3, r3, #8
 8001d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001da0:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <HAL_UART_MspInit+0x9c>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <HAL_UART_MspInit+0x9c>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <HAL_UART_MspInit+0x9c>)
 8001db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dba:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_UART_MspInit+0x9c>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001dda:	2307      	movs	r3, #7
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	4809      	ldr	r0, [pc, #36]	; (8001e0c <HAL_UART_MspInit+0xa0>)
 8001de6:	f7ff fdfb 	bl	80019e0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001df0:	2307      	movs	r3, #7
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4804      	ldr	r0, [pc, #16]	; (8001e0c <HAL_UART_MspInit+0xa0>)
 8001dfc:	f7ff fdf0 	bl	80019e0 <HAL_GPIO_Init>
}
 8001e00:	bf00      	nop
 8001e02:	3728      	adds	r7, #40	; 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020c00 	.word	0x40020c00

08001e10 <HAL_SPI_MspInit>:

/**
  * @}
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;

  if(hspi->Instance == SPI3)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <HAL_SPI_MspInit+0x9c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d11d      	bne.n	8001e5e <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <HAL_SPI_MspInit+0xa0>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <HAL_SPI_MspInit+0xa0>)
 8001e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <HAL_SPI_MspInit+0xa0>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    PB3 ------> SPI3_SCK
    PB4 ------> SPI3_MISO
    PB5 ------> SPI3_MOSI
    PA4 ------> SPI3_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8001e3e:	2338      	movs	r3, #56	; 0x38
 8001e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001e4e:	2305      	movs	r3, #5
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4816      	ldr	r0, [pc, #88]	; (8001eb4 <HAL_SPI_MspInit+0xa4>)
 8001e5a:	f7ff fdc1 	bl	80019e0 <HAL_GPIO_Init>

  }

  if(hspi->Instance == SPI1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <HAL_SPI_MspInit+0xa8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d11d      	bne.n	8001ea4 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_SPI_MspInit+0xa0>)
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <HAL_SPI_MspInit+0xa0>)
 8001e72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e76:	6453      	str	r3, [r2, #68]	; 0x44
 8001e78:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <HAL_SPI_MspInit+0xa0>)
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8001e84:	23e0      	movs	r3, #224	; 0xe0
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e94:	2305      	movs	r3, #5
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4807      	ldr	r0, [pc, #28]	; (8001ebc <HAL_SPI_MspInit+0xac>)
 8001ea0:	f7ff fd9e 	bl	80019e0 <HAL_GPIO_Init>

  }

}
 8001ea4:	bf00      	nop
 8001ea6:	3728      	adds	r7, #40	; 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40003c00 	.word	0x40003c00
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40013000 	.word	0x40013000
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_PWREx_EnableOverDrive+0x90>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_PWREx_EnableOverDrive+0x94>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001efc:	f7ff fc5a 	bl	80017b4 <HAL_GetTick>
 8001f00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f02:	e009      	b.n	8001f18 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f04:	f7ff fc56 	bl	80017b4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f12:	d901      	bls.n	8001f18 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e01f      	b.n	8001f58 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f24:	d1ee      	bne.n	8001f04 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f2c:	f7ff fc42 	bl	80017b4 <HAL_GetTick>
 8001f30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f32:	e009      	b.n	8001f48 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f34:	f7ff fc3e 	bl	80017b4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f42:	d901      	bls.n	8001f48 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e007      	b.n	8001f58 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f54:	d1ee      	bne.n	8001f34 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	420e0040 	.word	0x420e0040
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	420e0044 	.word	0x420e0044

08001f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e267      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d075      	beq.n	800207a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f8e:	4b88      	ldr	r3, [pc, #544]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d00c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9a:	4b85      	ldr	r3, [pc, #532]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d112      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa6:	4b82      	ldr	r3, [pc, #520]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb2:	d10b      	bne.n	8001fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	4b7e      	ldr	r3, [pc, #504]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d05b      	beq.n	8002078 <HAL_RCC_OscConfig+0x108>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d157      	bne.n	8002078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e242      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x74>
 8001fd6:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a75      	ldr	r2, [pc, #468]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e01d      	b.n	8002020 <HAL_RCC_OscConfig+0xb0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x98>
 8001fee:	4b70      	ldr	r3, [pc, #448]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6f      	ldr	r2, [pc, #444]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	4b6d      	ldr	r3, [pc, #436]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a6c      	ldr	r2, [pc, #432]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e00b      	b.n	8002020 <HAL_RCC_OscConfig+0xb0>
 8002008:	4b69      	ldr	r3, [pc, #420]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a68      	ldr	r2, [pc, #416]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800200e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b66      	ldr	r3, [pc, #408]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a65      	ldr	r2, [pc, #404]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800201a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff fbc4 	bl	80017b4 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff fbc0 	bl	80017b4 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	; 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e207      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b5b      	ldr	r3, [pc, #364]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0xc0>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fbb0 	bl	80017b4 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff fbac 	bl	80017b4 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1f3      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	4b51      	ldr	r3, [pc, #324]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0xe8>
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d063      	beq.n	800214e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002086:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800209a:	2b08      	cmp	r3, #8
 800209c:	d11c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209e:	4b44      	ldr	r3, [pc, #272]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d116      	bne.n	80020d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_RCC_OscConfig+0x152>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e1c7      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c2:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4937      	ldr	r1, [pc, #220]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	e03a      	b.n	800214e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d020      	beq.n	8002122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e0:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <HAL_RCC_OscConfig+0x244>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff fb65 	bl	80017b4 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff fb61 	bl	80017b4 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e1a8      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4925      	ldr	r1, [pc, #148]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
 8002120:	e015      	b.n	800214e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_OscConfig+0x244>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff fb44 	bl	80017b4 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002130:	f7ff fb40 	bl	80017b4 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e187      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d036      	beq.n	80021c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d016      	beq.n	8002190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_RCC_OscConfig+0x248>)
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff fb24 	bl	80017b4 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002170:	f7ff fb20 	bl	80017b4 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e167      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_OscConfig+0x240>)
 8002184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x200>
 800218e:	e01b      	b.n	80021c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_OscConfig+0x248>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff fb0d 	bl	80017b4 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219c:	e00e      	b.n	80021bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219e:	f7ff fb09 	bl	80017b4 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d907      	bls.n	80021bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e150      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
 80021b0:	40023800 	.word	0x40023800
 80021b4:	42470000 	.word	0x42470000
 80021b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	4b88      	ldr	r3, [pc, #544]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ea      	bne.n	800219e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8097 	beq.w	8002304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021da:	4b81      	ldr	r3, [pc, #516]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10f      	bne.n	8002206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	4b7d      	ldr	r3, [pc, #500]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a7c      	ldr	r2, [pc, #496]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b7a      	ldr	r3, [pc, #488]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b77      	ldr	r3, [pc, #476]	; (80023e4 <HAL_RCC_OscConfig+0x474>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d118      	bne.n	8002244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002212:	4b74      	ldr	r3, [pc, #464]	; (80023e4 <HAL_RCC_OscConfig+0x474>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a73      	ldr	r2, [pc, #460]	; (80023e4 <HAL_RCC_OscConfig+0x474>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221e:	f7ff fac9 	bl	80017b4 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7ff fac5 	bl	80017b4 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e10c      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b6a      	ldr	r3, [pc, #424]	; (80023e4 <HAL_RCC_OscConfig+0x474>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x2ea>
 800224c:	4b64      	ldr	r3, [pc, #400]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	4a63      	ldr	r2, [pc, #396]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6713      	str	r3, [r2, #112]	; 0x70
 8002258:	e01c      	b.n	8002294 <HAL_RCC_OscConfig+0x324>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x30c>
 8002262:	4b5f      	ldr	r3, [pc, #380]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	4a5e      	ldr	r2, [pc, #376]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6713      	str	r3, [r2, #112]	; 0x70
 800226e:	4b5c      	ldr	r3, [pc, #368]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a5b      	ldr	r2, [pc, #364]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0x324>
 800227c:	4b58      	ldr	r3, [pc, #352]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a57      	ldr	r2, [pc, #348]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
 8002288:	4b55      	ldr	r3, [pc, #340]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a54      	ldr	r2, [pc, #336]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800228e:	f023 0304 	bic.w	r3, r3, #4
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7ff fa8a 	bl	80017b4 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7ff fa86 	bl	80017b4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e0cb      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	4b49      	ldr	r3, [pc, #292]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0ee      	beq.n	80022a4 <HAL_RCC_OscConfig+0x334>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7ff fa74 	bl	80017b4 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7ff fa70 	bl	80017b4 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e0b5      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e6:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ee      	bne.n	80022d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f8:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	4a38      	ldr	r2, [pc, #224]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80022fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a1 	beq.w	8002450 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800230e:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b08      	cmp	r3, #8
 8002318:	d05c      	beq.n	80023d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d141      	bne.n	80023a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <HAL_RCC_OscConfig+0x478>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff fa44 	bl	80017b4 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7ff fa40 	bl	80017b4 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e087      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	019b      	lsls	r3, r3, #6
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	3b01      	subs	r3, #1
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	491b      	ldr	r1, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x478>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7ff fa19 	bl	80017b4 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002386:	f7ff fa15 	bl	80017b4 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e05c      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x416>
 80023a4:	e054      	b.n	8002450 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_RCC_OscConfig+0x478>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7ff fa02 	bl	80017b4 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b4:	f7ff f9fe 	bl	80017b4 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e045      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_RCC_OscConfig+0x470>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x444>
 80023d2:	e03d      	b.n	8002450 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d107      	bne.n	80023ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e038      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40007000 	.word	0x40007000
 80023e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x4ec>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d028      	beq.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d121      	bne.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d11a      	bne.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800241c:	4013      	ands	r3, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002424:	4293      	cmp	r3, r2
 8002426:	d111      	bne.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	3b01      	subs	r3, #1
 8002436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d107      	bne.n	800244c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800

08002460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0cc      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d90c      	bls.n	800249c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0b8      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a58      	ldr	r2, [pc, #352]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024cc:	4b53      	ldr	r3, [pc, #332]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a52      	ldr	r2, [pc, #328]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d8:	4b50      	ldr	r3, [pc, #320]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	494d      	ldr	r1, [pc, #308]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d044      	beq.n	8002580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	4b47      	ldr	r3, [pc, #284]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d119      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e07f      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d003      	beq.n	800251e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800251a:	2b03      	cmp	r3, #3
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	4b3f      	ldr	r3, [pc, #252]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e06f      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e067      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253e:	4b37      	ldr	r3, [pc, #220]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	4934      	ldr	r1, [pc, #208]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	4313      	orrs	r3, r2
 800254e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002550:	f7ff f930 	bl	80017b4 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	e00a      	b.n	800256e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002558:	f7ff f92c 	bl	80017b4 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e04f      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 020c 	and.w	r2, r3, #12
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	429a      	cmp	r2, r3
 800257e:	d1eb      	bne.n	8002558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002580:	4b25      	ldr	r3, [pc, #148]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d20c      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e032      	b.n	800260e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b4:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4916      	ldr	r1, [pc, #88]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	490e      	ldr	r1, [pc, #56]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025e6:	f000 f821 	bl	800262c <HAL_RCC_GetSysClockFreq>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	490a      	ldr	r1, [pc, #40]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	5ccb      	ldrb	r3, [r1, r3]
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_ClockConfig+0x1c8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f890 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40023c00 	.word	0x40023c00
 800261c:	40023800 	.word	0x40023800
 8002620:	08003c44 	.word	0x08003c44
 8002624:	20000094 	.word	0x20000094
 8002628:	20000098 	.word	0x20000098

0800262c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800262c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002630:	b094      	sub	sp, #80	; 0x50
 8002632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	647b      	str	r3, [r7, #68]	; 0x44
 8002638:	2300      	movs	r3, #0
 800263a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800263c:	2300      	movs	r3, #0
 800263e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002644:	4b79      	ldr	r3, [pc, #484]	; (800282c <HAL_RCC_GetSysClockFreq+0x200>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d00d      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x40>
 8002650:	2b08      	cmp	r3, #8
 8002652:	f200 80e1 	bhi.w	8002818 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x34>
 800265a:	2b04      	cmp	r3, #4
 800265c:	d003      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x3a>
 800265e:	e0db      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002660:	4b73      	ldr	r3, [pc, #460]	; (8002830 <HAL_RCC_GetSysClockFreq+0x204>)
 8002662:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002664:	e0db      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002666:	4b73      	ldr	r3, [pc, #460]	; (8002834 <HAL_RCC_GetSysClockFreq+0x208>)
 8002668:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800266a:	e0d8      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800266c:	4b6f      	ldr	r3, [pc, #444]	; (800282c <HAL_RCC_GetSysClockFreq+0x200>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002674:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002676:	4b6d      	ldr	r3, [pc, #436]	; (800282c <HAL_RCC_GetSysClockFreq+0x200>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d063      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002682:	4b6a      	ldr	r3, [pc, #424]	; (800282c <HAL_RCC_GetSysClockFreq+0x200>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	2200      	movs	r2, #0
 800268a:	63bb      	str	r3, [r7, #56]	; 0x38
 800268c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002694:	633b      	str	r3, [r7, #48]	; 0x30
 8002696:	2300      	movs	r3, #0
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
 800269a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800269e:	4622      	mov	r2, r4
 80026a0:	462b      	mov	r3, r5
 80026a2:	f04f 0000 	mov.w	r0, #0
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	0159      	lsls	r1, r3, #5
 80026ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b0:	0150      	lsls	r0, r2, #5
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4621      	mov	r1, r4
 80026b8:	1a51      	subs	r1, r2, r1
 80026ba:	6139      	str	r1, [r7, #16]
 80026bc:	4629      	mov	r1, r5
 80026be:	eb63 0301 	sbc.w	r3, r3, r1
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026d0:	4659      	mov	r1, fp
 80026d2:	018b      	lsls	r3, r1, #6
 80026d4:	4651      	mov	r1, sl
 80026d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026da:	4651      	mov	r1, sl
 80026dc:	018a      	lsls	r2, r1, #6
 80026de:	4651      	mov	r1, sl
 80026e0:	ebb2 0801 	subs.w	r8, r2, r1
 80026e4:	4659      	mov	r1, fp
 80026e6:	eb63 0901 	sbc.w	r9, r3, r1
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026fe:	4690      	mov	r8, r2
 8002700:	4699      	mov	r9, r3
 8002702:	4623      	mov	r3, r4
 8002704:	eb18 0303 	adds.w	r3, r8, r3
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	462b      	mov	r3, r5
 800270c:	eb49 0303 	adc.w	r3, r9, r3
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800271e:	4629      	mov	r1, r5
 8002720:	024b      	lsls	r3, r1, #9
 8002722:	4621      	mov	r1, r4
 8002724:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002728:	4621      	mov	r1, r4
 800272a:	024a      	lsls	r2, r1, #9
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002732:	2200      	movs	r2, #0
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
 8002736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002738:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800273c:	f7fd fd68 	bl	8000210 <__aeabi_uldivmod>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4613      	mov	r3, r2
 8002746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002748:	e058      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274a:	4b38      	ldr	r3, [pc, #224]	; (800282c <HAL_RCC_GetSysClockFreq+0x200>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	099b      	lsrs	r3, r3, #6
 8002750:	2200      	movs	r2, #0
 8002752:	4618      	mov	r0, r3
 8002754:	4611      	mov	r1, r2
 8002756:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800275a:	623b      	str	r3, [r7, #32]
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
 8002760:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	f04f 0000 	mov.w	r0, #0
 800276c:	f04f 0100 	mov.w	r1, #0
 8002770:	0159      	lsls	r1, r3, #5
 8002772:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002776:	0150      	lsls	r0, r2, #5
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4641      	mov	r1, r8
 800277e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002782:	4649      	mov	r1, r9
 8002784:	eb63 0b01 	sbc.w	fp, r3, r1
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002794:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002798:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800279c:	ebb2 040a 	subs.w	r4, r2, sl
 80027a0:	eb63 050b 	sbc.w	r5, r3, fp
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	00eb      	lsls	r3, r5, #3
 80027ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b2:	00e2      	lsls	r2, r4, #3
 80027b4:	4614      	mov	r4, r2
 80027b6:	461d      	mov	r5, r3
 80027b8:	4643      	mov	r3, r8
 80027ba:	18e3      	adds	r3, r4, r3
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	464b      	mov	r3, r9
 80027c0:	eb45 0303 	adc.w	r3, r5, r3
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027d2:	4629      	mov	r1, r5
 80027d4:	028b      	lsls	r3, r1, #10
 80027d6:	4621      	mov	r1, r4
 80027d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027dc:	4621      	mov	r1, r4
 80027de:	028a      	lsls	r2, r1, #10
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e6:	2200      	movs	r2, #0
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	61fa      	str	r2, [r7, #28]
 80027ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f0:	f7fd fd0e 	bl	8000210 <__aeabi_uldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4613      	mov	r3, r2
 80027fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_GetSysClockFreq+0x200>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	3301      	adds	r3, #1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800280c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800280e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002816:	e002      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCC_GetSysClockFreq+0x204>)
 800281a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800281c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800281e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002820:	4618      	mov	r0, r3
 8002822:	3750      	adds	r7, #80	; 0x50
 8002824:	46bd      	mov	sp, r7
 8002826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	00f42400 	.word	0x00f42400
 8002834:	007a1200 	.word	0x007a1200

08002838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_RCC_GetHCLKFreq+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000094 	.word	0x20000094

08002850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002854:	f7ff fff0 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 8002858:	4602      	mov	r2, r0
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	0a9b      	lsrs	r3, r3, #10
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	4903      	ldr	r1, [pc, #12]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002866:	5ccb      	ldrb	r3, [r1, r3]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40023800 	.word	0x40023800
 8002874:	08003c54 	.word	0x08003c54

08002878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800287c:	f7ff ffdc 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0b5b      	lsrs	r3, r3, #13
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4903      	ldr	r1, [pc, #12]	; (800289c <HAL_RCC_GetPCLK2Freq+0x24>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40023800 	.word	0x40023800
 800289c:	08003c54 	.word	0x08003c54

080028a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e083      	b.n	80029ba <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d108      	bne.n	80028cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028c2:	d009      	beq.n	80028d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
 80028ca:	e005      	b.n	80028d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d106      	bne.n	80028f2 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff fa8f 	bl	8001e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002908:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	ea42 0103 	orr.w	r1, r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	0c1b      	lsrs	r3, r3, #16
 8002970:	f003 0104 	and.w	r1, r3, #4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f003 0210 	and.w	r2, r3, #16
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298c:	d105      	bne.n	800299a <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b292      	uxth	r2, r2
 8002998:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b088      	sub	sp, #32
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_SPI_Transmit+0x22>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e148      	b.n	8002c76 <HAL_SPI_Transmit+0x2b4>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029ec:	f7fe fee2 	bl	80017b4 <HAL_GetTick>
 80029f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d002      	beq.n	8002a08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a06:	e12d      	b.n	8002c64 <HAL_SPI_Transmit+0x2a2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_SPI_Transmit+0x52>
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a18:	e124      	b.n	8002c64 <HAL_SPI_Transmit+0x2a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	88fa      	ldrh	r2, [r7, #6]
 8002a32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	88fa      	ldrh	r2, [r7, #6]
 8002a38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a60:	d10f      	bne.n	8002a82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a80:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8a:	d10f      	bne.n	8002aac <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aaa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d007      	beq.n	8002aca <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad2:	d14b      	bne.n	8002b6c <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_SPI_Transmit+0x120>
 8002adc:	8afb      	ldrh	r3, [r7, #22]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d13e      	bne.n	8002b60 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	881a      	ldrh	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	1c9a      	adds	r2, r3, #2
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b06:	e02b      	b.n	8002b60 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d112      	bne.n	8002b3c <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	881a      	ldrh	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	1c9a      	adds	r2, r3, #2
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b3a:	e011      	b.n	8002b60 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b3c:	f7fe fe3a 	bl	80017b4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d803      	bhi.n	8002b54 <HAL_SPI_Transmit+0x192>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b52:	d102      	bne.n	8002b5a <HAL_SPI_Transmit+0x198>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b5e:	e081      	b.n	8002c64 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ce      	bne.n	8002b08 <HAL_SPI_Transmit+0x146>
 8002b6a:	e04c      	b.n	8002c06 <HAL_SPI_Transmit+0x244>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_SPI_Transmit+0x1b8>
 8002b74:	8afb      	ldrh	r3, [r7, #22]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d140      	bne.n	8002bfc <HAL_SPI_Transmit+0x23a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	7812      	ldrb	r2, [r2, #0]
 8002b86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ba0:	e02c      	b.n	8002bfc <HAL_SPI_Transmit+0x23a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d113      	bne.n	8002bd8 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	7812      	ldrb	r2, [r2, #0]
 8002bbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bd6:	e011      	b.n	8002bfc <HAL_SPI_Transmit+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bd8:	f7fe fdec 	bl	80017b4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d803      	bhi.n	8002bf0 <HAL_SPI_Transmit+0x22e>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bee:	d102      	bne.n	8002bf6 <HAL_SPI_Transmit+0x234>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <HAL_SPI_Transmit+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bfa:	e033      	b.n	8002c64 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1cd      	bne.n	8002ba2 <HAL_SPI_Transmit+0x1e0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0e:	d107      	bne.n	8002c20 <HAL_SPI_Transmit+0x25e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c1e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	6839      	ldr	r1, [r7, #0]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f8b3 	bl	8002d90 <SPI_EndRxTxTransaction>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_SPI_Transmit+0x274>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <HAL_SPI_Transmit+0x292>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	77fb      	strb	r3, [r7, #31]
 8002c60:	e000      	b.n	8002c64 <HAL_SPI_Transmit+0x2a2>
  }

error:
 8002c62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c74:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c90:	f7fe fd90 	bl	80017b4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ca0:	f7fe fd88 	bl	80017b4 <HAL_GetTick>
 8002ca4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ca6:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	015b      	lsls	r3, r3, #5
 8002cac:	0d1b      	lsrs	r3, r3, #20
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	fb02 f303 	mul.w	r3, r2, r3
 8002cb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cb6:	e054      	b.n	8002d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d050      	beq.n	8002d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cc0:	f7fe fd78 	bl	80017b4 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d902      	bls.n	8002cd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d13d      	bne.n	8002d52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ce4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cee:	d111      	bne.n	8002d14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf8:	d004      	beq.n	8002d04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d02:	d107      	bne.n	8002d14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1c:	d10f      	bne.n	8002d3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e017      	b.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d19b      	bne.n	8002cb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000094 	.word	0x20000094

08002d90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <SPI_EndRxTxTransaction+0x7c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <SPI_EndRxTxTransaction+0x80>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0d5b      	lsrs	r3, r3, #21
 8002da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dba:	d112      	bne.n	8002de2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f7ff ff5a 	bl	8002c80 <SPI_WaitFlagStateUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	f043 0220 	orr.w	r2, r3, #32
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e00f      	b.n	8002e02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df8:	2b80      	cmp	r3, #128	; 0x80
 8002dfa:	d0f2      	beq.n	8002de2 <SPI_EndRxTxTransaction+0x52>
 8002dfc:	e000      	b.n	8002e00 <SPI_EndRxTxTransaction+0x70>
        break;
 8002dfe:	bf00      	nop
  }

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000094 	.word	0x20000094
 8002e10:	165e9f81 	.word	0x165e9f81

08002e14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e03f      	b.n	8002ea6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe ff96 	bl	8001d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2224      	movs	r2, #36	; 0x24
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f9cb 	bl	80031f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695a      	ldr	r2, [r3, #20]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b08a      	sub	sp, #40	; 0x28
 8002eb2:	af02      	add	r7, sp, #8
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d17c      	bne.n	8002fc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_UART_Transmit+0x2c>
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e075      	b.n	8002fca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_UART_Transmit+0x3e>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e06e      	b.n	8002fca <HAL_UART_Transmit+0x11c>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2221      	movs	r2, #33	; 0x21
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f02:	f7fe fc57 	bl	80017b4 <HAL_GetTick>
 8002f06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	88fa      	ldrh	r2, [r7, #6]
 8002f12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1c:	d108      	bne.n	8002f30 <HAL_UART_Transmit+0x82>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d104      	bne.n	8002f30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e003      	b.n	8002f38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f40:	e02a      	b.n	8002f98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f8e2 	bl	8003116 <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e036      	b.n	8002fca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10b      	bne.n	8002f7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	3302      	adds	r3, #2
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	e007      	b.n	8002f8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	3301      	adds	r3, #1
 8002f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1cf      	bne.n	8002f42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2140      	movs	r1, #64	; 0x40
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f8b2 	bl	8003116 <UART_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e006      	b.n	8002fca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e000      	b.n	8002fca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b08a      	sub	sp, #40	; 0x28
 8002fd6:	af02      	add	r7, sp, #8
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	f040 808c 	bne.w	800310c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_UART_Receive+0x2e>
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e084      	b.n	800310e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_UART_Receive+0x40>
 800300e:	2302      	movs	r3, #2
 8003010:	e07d      	b.n	800310e <HAL_UART_Receive+0x13c>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2222      	movs	r2, #34	; 0x22
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800302e:	f7fe fbc1 	bl	80017b4 <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	88fa      	ldrh	r2, [r7, #6]
 8003038:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003048:	d108      	bne.n	800305c <HAL_UART_Receive+0x8a>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d104      	bne.n	800305c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	e003      	b.n	8003064 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800306c:	e043      	b.n	80030f6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2200      	movs	r2, #0
 8003076:	2120      	movs	r1, #32
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f84c 	bl	8003116 <UART_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e042      	b.n	800310e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10c      	bne.n	80030a8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	b29b      	uxth	r3, r3
 8003096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309a:	b29a      	uxth	r2, r3
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	3302      	adds	r3, #2
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	e01f      	b.n	80030e8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b0:	d007      	beq.n	80030c2 <HAL_UART_Receive+0xf0>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <HAL_UART_Receive+0xfe>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e008      	b.n	80030e2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1b6      	bne.n	800306e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e000      	b.n	800310e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
  }
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b090      	sub	sp, #64	; 0x40
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003126:	e050      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312e:	d04c      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <UART_WaitOnFlagUntilTimeout+0x30>
 8003136:	f7fe fb3d 	bl	80017b4 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003142:	429a      	cmp	r2, r3
 8003144:	d241      	bcs.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	330c      	adds	r3, #12
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	e853 3f00 	ldrex	r3, [r3]
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800315c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003166:	637a      	str	r2, [r7, #52]	; 0x34
 8003168:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800316c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800316e:	e841 2300 	strex	r3, r2, [r1]
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e5      	bne.n	8003146 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3314      	adds	r3, #20
 8003180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	e853 3f00 	ldrex	r3, [r3]
 8003188:	613b      	str	r3, [r7, #16]
   return(result);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	63bb      	str	r3, [r7, #56]	; 0x38
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3314      	adds	r3, #20
 8003198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800319a:	623a      	str	r2, [r7, #32]
 800319c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	69f9      	ldr	r1, [r7, #28]
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e5      	bne.n	800317a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e00f      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d09f      	beq.n	8003128 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3740      	adds	r7, #64	; 0x40
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f8:	b0c0      	sub	sp, #256	; 0x100
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	68d9      	ldr	r1, [r3, #12]
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	ea40 0301 	orr.w	r3, r0, r1
 800321c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	431a      	orrs	r2, r3
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	431a      	orrs	r2, r3
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800324c:	f021 010c 	bic.w	r1, r1, #12
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800325a:	430b      	orrs	r3, r1
 800325c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800325e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800326a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326e:	6999      	ldr	r1, [r3, #24]
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	ea40 0301 	orr.w	r3, r0, r1
 800327a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b8f      	ldr	r3, [pc, #572]	; (80034c0 <UART_SetConfig+0x2cc>)
 8003284:	429a      	cmp	r2, r3
 8003286:	d005      	beq.n	8003294 <UART_SetConfig+0xa0>
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4b8d      	ldr	r3, [pc, #564]	; (80034c4 <UART_SetConfig+0x2d0>)
 8003290:	429a      	cmp	r2, r3
 8003292:	d104      	bne.n	800329e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003294:	f7ff faf0 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8003298:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800329c:	e003      	b.n	80032a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800329e:	f7ff fad7 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 80032a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b0:	f040 810c 	bne.w	80034cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b8:	2200      	movs	r2, #0
 80032ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032c6:	4622      	mov	r2, r4
 80032c8:	462b      	mov	r3, r5
 80032ca:	1891      	adds	r1, r2, r2
 80032cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80032ce:	415b      	adcs	r3, r3
 80032d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032d6:	4621      	mov	r1, r4
 80032d8:	eb12 0801 	adds.w	r8, r2, r1
 80032dc:	4629      	mov	r1, r5
 80032de:	eb43 0901 	adc.w	r9, r3, r1
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032f6:	4690      	mov	r8, r2
 80032f8:	4699      	mov	r9, r3
 80032fa:	4623      	mov	r3, r4
 80032fc:	eb18 0303 	adds.w	r3, r8, r3
 8003300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003304:	462b      	mov	r3, r5
 8003306:	eb49 0303 	adc.w	r3, r9, r3
 800330a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800331a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800331e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003322:	460b      	mov	r3, r1
 8003324:	18db      	adds	r3, r3, r3
 8003326:	653b      	str	r3, [r7, #80]	; 0x50
 8003328:	4613      	mov	r3, r2
 800332a:	eb42 0303 	adc.w	r3, r2, r3
 800332e:	657b      	str	r3, [r7, #84]	; 0x54
 8003330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003338:	f7fc ff6a 	bl	8000210 <__aeabi_uldivmod>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <UART_SetConfig+0x2d4>)
 8003342:	fba3 2302 	umull	r2, r3, r3, r2
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	011c      	lsls	r4, r3, #4
 800334a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800334e:	2200      	movs	r2, #0
 8003350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003354:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800335c:	4642      	mov	r2, r8
 800335e:	464b      	mov	r3, r9
 8003360:	1891      	adds	r1, r2, r2
 8003362:	64b9      	str	r1, [r7, #72]	; 0x48
 8003364:	415b      	adcs	r3, r3
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800336c:	4641      	mov	r1, r8
 800336e:	eb12 0a01 	adds.w	sl, r2, r1
 8003372:	4649      	mov	r1, r9
 8003374:	eb43 0b01 	adc.w	fp, r3, r1
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800338c:	4692      	mov	sl, r2
 800338e:	469b      	mov	fp, r3
 8003390:	4643      	mov	r3, r8
 8003392:	eb1a 0303 	adds.w	r3, sl, r3
 8003396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800339a:	464b      	mov	r3, r9
 800339c:	eb4b 0303 	adc.w	r3, fp, r3
 80033a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033b8:	460b      	mov	r3, r1
 80033ba:	18db      	adds	r3, r3, r3
 80033bc:	643b      	str	r3, [r7, #64]	; 0x40
 80033be:	4613      	mov	r3, r2
 80033c0:	eb42 0303 	adc.w	r3, r2, r3
 80033c4:	647b      	str	r3, [r7, #68]	; 0x44
 80033c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033ce:	f7fc ff1f 	bl	8000210 <__aeabi_uldivmod>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4611      	mov	r1, r2
 80033d8:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <UART_SetConfig+0x2d4>)
 80033da:	fba3 2301 	umull	r2, r3, r3, r1
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	2264      	movs	r2, #100	; 0x64
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	1acb      	subs	r3, r1, r3
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033ee:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <UART_SetConfig+0x2d4>)
 80033f0:	fba3 2302 	umull	r2, r3, r3, r2
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033fc:	441c      	add	r4, r3
 80033fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003402:	2200      	movs	r2, #0
 8003404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003408:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800340c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003410:	4642      	mov	r2, r8
 8003412:	464b      	mov	r3, r9
 8003414:	1891      	adds	r1, r2, r2
 8003416:	63b9      	str	r1, [r7, #56]	; 0x38
 8003418:	415b      	adcs	r3, r3
 800341a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800341c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003420:	4641      	mov	r1, r8
 8003422:	1851      	adds	r1, r2, r1
 8003424:	6339      	str	r1, [r7, #48]	; 0x30
 8003426:	4649      	mov	r1, r9
 8003428:	414b      	adcs	r3, r1
 800342a:	637b      	str	r3, [r7, #52]	; 0x34
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003438:	4659      	mov	r1, fp
 800343a:	00cb      	lsls	r3, r1, #3
 800343c:	4651      	mov	r1, sl
 800343e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003442:	4651      	mov	r1, sl
 8003444:	00ca      	lsls	r2, r1, #3
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	4603      	mov	r3, r0
 800344c:	4642      	mov	r2, r8
 800344e:	189b      	adds	r3, r3, r2
 8003450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003454:	464b      	mov	r3, r9
 8003456:	460a      	mov	r2, r1
 8003458:	eb42 0303 	adc.w	r3, r2, r3
 800345c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800346c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003474:	460b      	mov	r3, r1
 8003476:	18db      	adds	r3, r3, r3
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
 800347a:	4613      	mov	r3, r2
 800347c:	eb42 0303 	adc.w	r3, r2, r3
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800348a:	f7fc fec1 	bl	8000210 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <UART_SetConfig+0x2d4>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	2164      	movs	r1, #100	; 0x64
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	3332      	adds	r3, #50	; 0x32
 80034a6:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <UART_SetConfig+0x2d4>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	f003 0207 	and.w	r2, r3, #7
 80034b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4422      	add	r2, r4
 80034ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034bc:	e105      	b.n	80036ca <UART_SetConfig+0x4d6>
 80034be:	bf00      	nop
 80034c0:	40011000 	.word	0x40011000
 80034c4:	40011400 	.word	0x40011400
 80034c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034de:	4642      	mov	r2, r8
 80034e0:	464b      	mov	r3, r9
 80034e2:	1891      	adds	r1, r2, r2
 80034e4:	6239      	str	r1, [r7, #32]
 80034e6:	415b      	adcs	r3, r3
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ee:	4641      	mov	r1, r8
 80034f0:	1854      	adds	r4, r2, r1
 80034f2:	4649      	mov	r1, r9
 80034f4:	eb43 0501 	adc.w	r5, r3, r1
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	00eb      	lsls	r3, r5, #3
 8003502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003506:	00e2      	lsls	r2, r4, #3
 8003508:	4614      	mov	r4, r2
 800350a:	461d      	mov	r5, r3
 800350c:	4643      	mov	r3, r8
 800350e:	18e3      	adds	r3, r4, r3
 8003510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003514:	464b      	mov	r3, r9
 8003516:	eb45 0303 	adc.w	r3, r5, r3
 800351a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800352a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800353a:	4629      	mov	r1, r5
 800353c:	008b      	lsls	r3, r1, #2
 800353e:	4621      	mov	r1, r4
 8003540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003544:	4621      	mov	r1, r4
 8003546:	008a      	lsls	r2, r1, #2
 8003548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800354c:	f7fc fe60 	bl	8000210 <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4b60      	ldr	r3, [pc, #384]	; (80036d8 <UART_SetConfig+0x4e4>)
 8003556:	fba3 2302 	umull	r2, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	011c      	lsls	r4, r3, #4
 800355e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003562:	2200      	movs	r2, #0
 8003564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800356c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003570:	4642      	mov	r2, r8
 8003572:	464b      	mov	r3, r9
 8003574:	1891      	adds	r1, r2, r2
 8003576:	61b9      	str	r1, [r7, #24]
 8003578:	415b      	adcs	r3, r3
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003580:	4641      	mov	r1, r8
 8003582:	1851      	adds	r1, r2, r1
 8003584:	6139      	str	r1, [r7, #16]
 8003586:	4649      	mov	r1, r9
 8003588:	414b      	adcs	r3, r1
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003598:	4659      	mov	r1, fp
 800359a:	00cb      	lsls	r3, r1, #3
 800359c:	4651      	mov	r1, sl
 800359e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a2:	4651      	mov	r1, sl
 80035a4:	00ca      	lsls	r2, r1, #3
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	4642      	mov	r2, r8
 80035ae:	189b      	adds	r3, r3, r2
 80035b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035b4:	464b      	mov	r3, r9
 80035b6:	460a      	mov	r2, r1
 80035b8:	eb42 0303 	adc.w	r3, r2, r3
 80035bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80035ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035d8:	4649      	mov	r1, r9
 80035da:	008b      	lsls	r3, r1, #2
 80035dc:	4641      	mov	r1, r8
 80035de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035e2:	4641      	mov	r1, r8
 80035e4:	008a      	lsls	r2, r1, #2
 80035e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035ea:	f7fc fe11 	bl	8000210 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4b39      	ldr	r3, [pc, #228]	; (80036d8 <UART_SetConfig+0x4e4>)
 80035f4:	fba3 1302 	umull	r1, r3, r3, r2
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	2164      	movs	r1, #100	; 0x64
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	3332      	adds	r3, #50	; 0x32
 8003606:	4a34      	ldr	r2, [pc, #208]	; (80036d8 <UART_SetConfig+0x4e4>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003612:	441c      	add	r4, r3
 8003614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003618:	2200      	movs	r2, #0
 800361a:	673b      	str	r3, [r7, #112]	; 0x70
 800361c:	677a      	str	r2, [r7, #116]	; 0x74
 800361e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003622:	4642      	mov	r2, r8
 8003624:	464b      	mov	r3, r9
 8003626:	1891      	adds	r1, r2, r2
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	415b      	adcs	r3, r3
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003632:	4641      	mov	r1, r8
 8003634:	1851      	adds	r1, r2, r1
 8003636:	6039      	str	r1, [r7, #0]
 8003638:	4649      	mov	r1, r9
 800363a:	414b      	adcs	r3, r1
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800364a:	4659      	mov	r1, fp
 800364c:	00cb      	lsls	r3, r1, #3
 800364e:	4651      	mov	r1, sl
 8003650:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003654:	4651      	mov	r1, sl
 8003656:	00ca      	lsls	r2, r1, #3
 8003658:	4610      	mov	r0, r2
 800365a:	4619      	mov	r1, r3
 800365c:	4603      	mov	r3, r0
 800365e:	4642      	mov	r2, r8
 8003660:	189b      	adds	r3, r3, r2
 8003662:	66bb      	str	r3, [r7, #104]	; 0x68
 8003664:	464b      	mov	r3, r9
 8003666:	460a      	mov	r2, r1
 8003668:	eb42 0303 	adc.w	r3, r2, r3
 800366c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	663b      	str	r3, [r7, #96]	; 0x60
 8003678:	667a      	str	r2, [r7, #100]	; 0x64
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003686:	4649      	mov	r1, r9
 8003688:	008b      	lsls	r3, r1, #2
 800368a:	4641      	mov	r1, r8
 800368c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003690:	4641      	mov	r1, r8
 8003692:	008a      	lsls	r2, r1, #2
 8003694:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003698:	f7fc fdba 	bl	8000210 <__aeabi_uldivmod>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <UART_SetConfig+0x4e4>)
 80036a2:	fba3 1302 	umull	r1, r3, r3, r2
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2164      	movs	r1, #100	; 0x64
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	3332      	adds	r3, #50	; 0x32
 80036b4:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <UART_SetConfig+0x4e4>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	f003 020f 	and.w	r2, r3, #15
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4422      	add	r2, r4
 80036c8:	609a      	str	r2, [r3, #8]
}
 80036ca:	bf00      	nop
 80036cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036d0:	46bd      	mov	sp, r7
 80036d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d6:	bf00      	nop
 80036d8:	51eb851f 	.word	0x51eb851f

080036dc <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 80036e0:	f7fe f808 	bl	80016f4 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80036e4:	f000 f85a 	bl	800379c <SystemClock_Config>

	// Debug LEDs
	BSP_LED_Init(LED1);						// Inicializacion de los LED
 80036e8:	2000      	movs	r0, #0
 80036ea:	f7fd ff35 	bl	8001558 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 80036ee:	2001      	movs	r0, #1
 80036f0:	f7fd ff32 	bl	8001558 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 80036f4:	2002      	movs	r0, #2
 80036f6:	f7fd ff2f 	bl	8001558 <BSP_LED_Init>

	GPIO_Config();
 80036fa:	f7fc ffdd 	bl	80006b8 <GPIO_Config>
	LCD_Config();
 80036fe:	f7fd f81d 	bl	800073c <LCD_Config>

	LCD_Init();
 8003702:	f7fd f853 	bl	80007ac <LCD_Init>
	uartinit();
 8003706:	f7fd fe7d 	bl	8001404 <uartinit>
	mybuffer[0] = '\0';
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <main+0x48>)
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]

	FSM_Init();
 8003710:	f7fc ff00 	bl	8000514 <FSM_Init>

	/* Infinite loop */
	while (1)
	{

		eventGenerator();
 8003714:	f000 f80a 	bl	800372c <eventGenerator>
		FSM_Update(newEvent);				// Corre la iteracion de la FMS. Chequea si hay nuevos eventos y actualiza el estado segun corresponda
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <main+0x4c>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fc ff07 	bl	8000530 <FSM_Update>
		eventGenerator();
 8003722:	e7f7      	b.n	8003714 <main+0x38>
 8003724:	2000016c 	.word	0x2000016c
 8003728:	20000168 	.word	0x20000168

0800372c <eventGenerator>:
	}
}

/* Public functions --------------------------------------------------------*/
void eventGenerator(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
	newEvent = NO_EVENT;
 8003730:	4b16      	ldr	r3, [pc, #88]	; (800378c <eventGenerator+0x60>)
 8003732:	2202      	movs	r2, #2
 8003734:	701a      	strb	r2, [r3, #0]

	uartReceiveStringSize((uint8_t *)mybuffer, 10);
 8003736:	210a      	movs	r1, #10
 8003738:	4815      	ldr	r0, [pc, #84]	; (8003790 <eventGenerator+0x64>)
 800373a:	f7fd fee7 	bl	800150c <uartReceiveStringSize>

	if(mybuffer[0] != 0)
 800373e:	4b14      	ldr	r3, [pc, #80]	; (8003790 <eventGenerator+0x64>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01f      	beq.n	8003786 <eventGenerator+0x5a>
	{

		mybuffer[strlen((const char *)mybuffer) - 1] = '\0';
 8003746:	4812      	ldr	r0, [pc, #72]	; (8003790 <eventGenerator+0x64>)
 8003748:	f7fc fd5a 	bl	8000200 <strlen>
 800374c:	4603      	mov	r3, r0
 800374e:	3b01      	subs	r3, #1
 8003750:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <eventGenerator+0x64>)
 8003752:	2100      	movs	r1, #0
 8003754:	54d1      	strb	r1, [r2, r3]

		if(!strcmp((const char *)mybuffer, "next"))
 8003756:	490f      	ldr	r1, [pc, #60]	; (8003794 <eventGenerator+0x68>)
 8003758:	480d      	ldr	r0, [pc, #52]	; (8003790 <eventGenerator+0x64>)
 800375a:	f7fc fd47 	bl	80001ec <strcmp>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d103      	bne.n	800376c <eventGenerator+0x40>
		{
			newEvent = UART_NEXT;
 8003764:	4b09      	ldr	r3, [pc, #36]	; (800378c <eventGenerator+0x60>)
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	e009      	b.n	8003780 <eventGenerator+0x54>
		}
		else
			if(!strcmp((const char *)mybuffer, "prev"))
 800376c:	490a      	ldr	r1, [pc, #40]	; (8003798 <eventGenerator+0x6c>)
 800376e:	4808      	ldr	r0, [pc, #32]	; (8003790 <eventGenerator+0x64>)
 8003770:	f7fc fd3c 	bl	80001ec <strcmp>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <eventGenerator+0x54>
			{
				newEvent = UART_PREV;
 800377a:	4b04      	ldr	r3, [pc, #16]	; (800378c <eventGenerator+0x60>)
 800377c:	2201      	movs	r2, #1
 800377e:	701a      	strb	r2, [r3, #0]
			}

		mybuffer[0] = 0;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <eventGenerator+0x64>)
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
	}
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000168 	.word	0x20000168
 8003790:	2000016c 	.word	0x2000016c
 8003794:	080039ec 	.word	0x080039ec
 8003798:	080039f4 	.word	0x080039f4

0800379c <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b094      	sub	sp, #80	; 0x50
 80037a0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <SystemClock_Config+0xbc>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a2b      	ldr	r2, [pc, #172]	; (8003858 <SystemClock_Config+0xbc>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b29      	ldr	r3, [pc, #164]	; (8003858 <SystemClock_Config+0xbc>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037be:	2300      	movs	r3, #0
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	4b26      	ldr	r3, [pc, #152]	; (800385c <SystemClock_Config+0xc0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a25      	ldr	r2, [pc, #148]	; (800385c <SystemClock_Config+0xc0>)
 80037c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	4b23      	ldr	r3, [pc, #140]	; (800385c <SystemClock_Config+0xc0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037da:	2301      	movs	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80037de:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80037e2:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037e4:	2302      	movs	r3, #2
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 80037ee:	2308      	movs	r3, #8
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 80037f2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80037f6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037f8:	2302      	movs	r3, #2
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80037fc:	2307      	movs	r3, #7
 80037fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003800:	f107 030c 	add.w	r3, r7, #12
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fbb3 	bl	8001f70 <HAL_RCC_OscConfig>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8003810:	f000 f826 	bl	8003860 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003814:	f7fe fb5c 	bl	8001ed0 <HAL_PWREx_EnableOverDrive>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 800381e:	f000 f81f 	bl	8003860 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003822:	230f      	movs	r3, #15
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003826:	2302      	movs	r3, #2
 8003828:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800382a:	2300      	movs	r3, #0
 800382c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800382e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003832:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003838:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800383a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800383e:	2105      	movs	r1, #5
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fe0d 	bl	8002460 <HAL_RCC_ClockConfig>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 800384c:	f000 f808 	bl	8003860 <Error_Handler>
	}
}
 8003850:	bf00      	nop
 8003852:	3750      	adds	r7, #80	; 0x50
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40023800 	.word	0x40023800
 800385c:	40007000 	.word	0x40007000

08003860 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8003864:	2001      	movs	r0, #1
 8003866:	f7fd fec7 	bl	80015f8 <BSP_LED_On>
	while (1)
 800386a:	e7fe      	b.n	800386a <Error_Handler+0xa>

0800386c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800386c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038a4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003870:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003872:	e003      	b.n	800387c <LoopCopyDataInit>

08003874 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003876:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003878:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800387a:	3104      	adds	r1, #4

0800387c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800387c:	480b      	ldr	r0, [pc, #44]	; (80038ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800387e:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003880:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003882:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003884:	d3f6      	bcc.n	8003874 <CopyDataInit>
  ldr  r2, =_sbss
 8003886:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003888:	e002      	b.n	8003890 <LoopFillZerobss>

0800388a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800388a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800388c:	f842 3b04 	str.w	r3, [r2], #4

08003890 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003892:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003894:	d3f9      	bcc.n	800388a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003896:	f7fd fec9 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800389a:	f000 f811 	bl	80038c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800389e:	f7ff ff1d 	bl	80036dc <main>
  bx  lr    
 80038a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80038a4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80038a8:	08003c6c 	.word	0x08003c6c
  ldr  r0, =_sdata
 80038ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038b0:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 80038b4:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 80038b8:	20000178 	.word	0x20000178

080038bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038bc:	e7fe      	b.n	80038bc <ADC_IRQHandler>
	...

080038c0 <__libc_init_array>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	4d0d      	ldr	r5, [pc, #52]	; (80038f8 <__libc_init_array+0x38>)
 80038c4:	4c0d      	ldr	r4, [pc, #52]	; (80038fc <__libc_init_array+0x3c>)
 80038c6:	1b64      	subs	r4, r4, r5
 80038c8:	10a4      	asrs	r4, r4, #2
 80038ca:	2600      	movs	r6, #0
 80038cc:	42a6      	cmp	r6, r4
 80038ce:	d109      	bne.n	80038e4 <__libc_init_array+0x24>
 80038d0:	4d0b      	ldr	r5, [pc, #44]	; (8003900 <__libc_init_array+0x40>)
 80038d2:	4c0c      	ldr	r4, [pc, #48]	; (8003904 <__libc_init_array+0x44>)
 80038d4:	f000 f818 	bl	8003908 <_init>
 80038d8:	1b64      	subs	r4, r4, r5
 80038da:	10a4      	asrs	r4, r4, #2
 80038dc:	2600      	movs	r6, #0
 80038de:	42a6      	cmp	r6, r4
 80038e0:	d105      	bne.n	80038ee <__libc_init_array+0x2e>
 80038e2:	bd70      	pop	{r4, r5, r6, pc}
 80038e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e8:	4798      	blx	r3
 80038ea:	3601      	adds	r6, #1
 80038ec:	e7ee      	b.n	80038cc <__libc_init_array+0xc>
 80038ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f2:	4798      	blx	r3
 80038f4:	3601      	adds	r6, #1
 80038f6:	e7f2      	b.n	80038de <__libc_init_array+0x1e>
 80038f8:	08003c64 	.word	0x08003c64
 80038fc:	08003c64 	.word	0x08003c64
 8003900:	08003c64 	.word	0x08003c64
 8003904:	08003c68 	.word	0x08003c68

08003908 <_init>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr

08003914 <_fini>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	bf00      	nop
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr
